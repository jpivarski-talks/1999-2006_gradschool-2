%!PS-Adobe-2.0 EPSF-2.0
%%Title: quarter_view2.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3d
%%CreationDate: Tue Jun  7 14:30:00 2005
%%For: mccann@lnx193.lns.cornell.edu (Jim Pivarski,CUg)
%%BoundingBox: 0 0 614 505
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 505 moveto 0 0 lineto 614 0 lineto 614 505 lineto closepath clip newpath
-66.4 549.1 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
 0.06000 0.06000 sc
%
% Fig objects follow
%
% Polyline
%
% pen to black in case this eps object doesn't set color first
0 0 0 setrgbcolor
% Begin Imported EPS File: quarter_view.eps
%%BeginDocument: quarter_view.eps
%
n gs
1800 750 tr
16.666084 -16.666667 sc
0 -489 tr
0 0 tr
sa
n 0 0 m 572 0 l 572 489 l 0 489 l cp clip n
countdictstack
mark
/showpage {} def
% EPS file follows:
%!PS-Adobe-3.1 EPSF-3.0
%%Title: 2230204-003.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0
%AI9_PrintingDataBegin
%%For: Michael Roman
%%CreationDate: 2/16/04
%%BoundingBox: 0 0 572 489
%%HiResBoundingBox: 0 0 571.5601 488.4727
%%CropBox: 0 0 571.5601 488.4727
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: font Helvetica
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: Helvetica
%%DocumentNeededFonts: Helvetica
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%AI7_Thumbnail: 128 112 8
%%BeginData: 18200 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD65FFA8A87DFF7DFF7DA8A87DA8FFFFFF7DA8A87DA8FD2EFFA8FD
%13FFA8FD2AFFA852A8527D527D7D7D527D27FF527D527D527DFD1BFFA8FD
%11FF7DFD13FFA8FD16FFA8FD14FF527D27A8527DFD04527D527D7D527D52
%7D7DFD1BFFA8FD11FFA8FD13FFA8FD15FFA8A8FD19FFA8FD28FFA8FD11FF
%A8FD12FFA8FD16FFA8FD19FFA8FD17FFCF7BA67CA67BA57BA57AA57BA67B
%A57BA6517B7B7C7C7B7BA67CA67CA7FFFF7BA6A8FF7CFD13FFA8FD15FFA8
%FD19FFA8FD18FFCFA4FEFEFEA4FEFEFEA4FEFEFEA4FEFEFEA4FD04FE7AFE
%FEFE7AFEFEA47BA4FEA47AA5A4A6A7CF7AA7A8FFA7A57CFFFFA67CFFFFFF
%7BA7FD04FFCFFD0FFFA8FD19FFA8FD19FFCF7AFEFEFE7AFEFEFE7AFEFEFE
%7AFEFEFE7AFEFEFEA4A4FEFEFEA4FEFEFEA4FEFEFEA4A4FEFEFE50FEFEA4
%7B7BFEFE7A7CA4FEA4A6A7A4FEA5A7FF7BA5A7FFFFCF7CFD09FF7CFD19FF
%A8FD1AFFCFA4FEFEFEA4FEFEFEA4FEFEFEA4FEFEFEA4FEFEFEA4FEFEFEA4
%FD04FEA4FEFEFEA4FD04FEA4FD04FEA4FEFEFEA4FD04FE7AFD04FE51FEFE
%FEA5CFA5FEA5CFFFA5A5FFFFFFA6FEA6FFFFFFCFA7FD12FFA8FD1BFFCF7A
%FEFEFE7AFEFEFE7AFEFEFE7AFEFEFE7AFEFEFE7AFEFEFE7AFD04FEA4FEFE
%FEA4FEFEFEA4A4FEFEFE7AFEFEFEA4FD04FEA4A4FEFEFEA4A4FD04FE7AFE
%FEFEA47BFEFEA4A7A7FEFEFE7BFFA8A5FEA6FFFFA8A6A8FFFFFFA7A6FD05
%FFA7A8FD1CFFCEA4FEFEFEA4FEFEFEA4FEFEA4FD04FEA4FEFEFEA4FEFEFE
%A4FEFEFEA4FEFEFEA4FD04FEA4FD04FEA4FEFE7AFD05FE7AFD04FEA4FD04
%FEA4FD05FEA4FEFEFEA4A4FD04FEA5A5FEFEFEA6A8A5FECCA7FFA7CCFEA7
%FFFFFFA6FEA6A8FFFFFFA8A6A8FD15FFCF7AFEFEFE7AFEFEA4A4FEFEA4FE
%FEFEA4A4FEFEFE7AFEFEFE7AFEFEFE7AFEFEFE7AFEFEFEA4A4FEFEFEA4FE
%FE7AA47A7A50FE7AFD04FEA4A4FEFEFEA4A4FD04FEA4FD04FEA4FD05FEA4
%FD05FE7AFEFEFEA47CFD04FEA6A8A5FEFEFEA5FFFFA6A4FEA5A8FFFFA67C
%FFFFFF52FFFF7DFD09FFCFA4FEFEFEA4FEFEA4FEFEFEA4FEFEFEA4FEFEFE
%A4FEFEFEA4FD04FEA4FD07FEA4FD07FEA47A7A267AFD06FEA4FD04FEA4FD
%04FEA4FD04FEA4FD0BFEA4FD05FEA4FD05FE7BFD05FEA6A6FD04FEA6CFA5
%FEFEA7FFFF7DFFFF52FD09FFCF7AFEFEFE7AFEFEA4FEFEFEA4FEFEFEA4FE
%FEFEA4FEFEFEA4FEFEFEA4A4FEFEA4FD04FE7AFD11FEA4FD04FEA4A4FEFE
%FEA4FD04FEA4A4FD04FEA4A4FD04FEA4FD04FEA4A4FD04FEA4A4FD06FE7A
%FD05FEA47AFEFEFEA4A7FF52FFFF7DFD09FFCFA4FEFEFEA4FEFEA4FEFEFE
%A4FEFEFEA4FEFEFEA4FEFEFEA4FEFEFEA4FEFEFEA4FEFEFEA4FE507AA4FE
%FEFEA4FD0DFEA4FD05FEA4FD05FEA4FD05FEA4FD04FEA4FD04FEA4A4FD05
%FEA4FD06FEA4FD05FEA4A4FD04FEA4A8FF7DFFFF52FD09FFCF7AFEFEFE7A
%FEFEA4FEFEFEA4FEFEFEA4FEFEFEA4FEFEFEA4FEFEFEA4FEFEA4FD04FEA4
%FE507A7A507A7AF87A7A505050A4FD04507A50507A50A4FEFEA4A4FD04FE
%A4FD04FEA4A4FD04FEA4FD04FEA4A4FD04FEA4A4FD05FEA4A4FD05FEA4A4
%FD04FEA4CFFFFF52FFFF7DFD09FFCFA4FEFEFEA4FEFEA4FEFEFEA4FEFEFE
%A4FEFEFEA4FEFEA4FD07FEA4FD04FEA4FE267AF826507AF8FD067A2650F8
%7A7A267A7A7AA4FEFEA4FD04FEA4FD05FEA4FD04FEA4FD04FEA4A4FD04FE
%A4FD06FEA4A4FD05FEA4FD05FE7ACFFFFFFF7DFFFF52FD09FFCF7AFEFEFE
%A4FEFEA4FEFEFEA4FEFEA4FEFEFE7AFEFEFE7AFEFEFE7AFEFEFE7AFEFEFE
%7AFD05FEA47AFEFEA4FD06FE7A50FD08FEA4A4FEFEFE7AFD05FEA4FD04FE
%A4FD04FEA4FD05FEA4A4FD05FEA4A4FD04FEA47AFD05FE7AFEA5FFFFFF52
%FFFF7DFD09FFCEA4FEFE7AFEFEFE7AFEFEA4A4FEFEA4FEFEFEA4FEFEFEA4
%FEFEFEA4FEFEA4FD04FEA4FD05FE7AA47A50FD057A507A50267A7A50FD05
%FEA4FEFEFEA4FD05FEA4FD04FEA4FD04FEA4FD05FEA4FD06FEA4FD05FEA4
%A4FD05FEA4FEFEFE7BFFFF7DA8FF52FD09FFCF7AFEFEA4FEFEFEA4FEFE7A
%FEFEFE7AFEFEFE7AFEFEFEA4FEFEFEA4FEFEA4FEFEFEA4A4FEFEA4FEFE50
%7A5026507A507A507A50265050267AFD04FE7AFEFEFEA4FD05FE7AFD04FE
%A4FD04FEA4FD05FE7AFD05FEA4A4FD05FEA4A4FD04FEA4A4FD05FE7C5252
%7DFF7DFD09FFCFA4FEFEA4FEFEFEA4FEFEA4FEFEFEA4FEFEFEA4FEFEA4FE
%FEFEA4FEFEFEA4FEFEFEA4FEFEFEA4FD0BFEA4FD09FEA4FD09FEA4FD04FE
%A4FD04FEA4FD05FEA4FD05FEA4FD06FEA4FD05FEA4FD06FEA4517DFF52FF
%52FD09FFCF7AFEFEA4FEFEFEA4FEFE7AFEFEFE7AFEFEFEA4FEFEA4FEFEFE
%A4FEFE7AFEFEFEA4FEFEFEA4FEFEFE7AFEFEFE7AFEFEFEA4A4FEFEFEA4FD
%04FEA4FEFEFEA4A4FD04FE7AFD04FEA4FD04FEA4A4FD04FE7AFD05FEA4A4
%FD04FEA4A4FD04FEA4A4FD06FE507CFFFFFF7DFF7DFD09FFA7FEFEFEA4FE
%FEFEA4FEFEA4FEFEFEA4FEFE7AFEFEFE7AFEFEFEA4FEFEA4FEFEFEA4FEFE
%FEA4FEFEFEA4FEFEFEA4FEFEFEA4FD04FEA4FEFEFEA4FD04FEA4FD04FEA4
%FD04FEA4FD04FEA4FD05FEA4FD05FE7AFD05FE7AFD05FEA4A5FD05FEA426
%A8FD04FF527D7DFD09FFA7FEFEFEA4FEFE7AFEFEFE7AFEFEA4FEFEFEA4FE
%FEA4A4FEFE7AFEFEFEA4FEFEFE7AFEFEA4A4FEFEA4FEFEFEA4FEFEFEA4A4
%FEFEFE50FEFEFEA4A4FEFEFE7AFD04FE7AFD04FE7BA4FEFEFEA4A4FEFEFE
%A47BFD05FE7CA5FD04FE7AA6FD04FEA4A8A6FD04FE7A51FD05FF52527DFD
%0AFFA8FEFEFEA4FEFEA4FEFEFEA4FEFEA4FEFEFEA4FEFEA4FEFEFEA4FEFE
%7AA5FEFE7AA5FEFE7AFEFEFE7BCCFEFE7CA5FEFE7CA5FEFEA5FFA6FEFEA6
%A6FEFEA5CFA7FEFEA5FFA5FEFEA7FFCFA4FEA4CFA7CCFECCA7FFA7CCFECC
%A7FFFFCCFEFEA6FFFFA6FEFEA5FFFFFFA6FEA451A7FFFFFFA87D52FD0DFF
%7D7A7B50517A7A507B7A7A517C7A50517B7A51517B517C517B517B507C7D
%7C507B7D7B507D7C7B50A87D7B51A87D7B51A87D7C507D7DA87C7B7DA87C
%7B7CA87D7D7A7D7DA87B7C7DA87D7D507D7DA87C7B7DA87DA87C7B7CA87D
%A87D7B7CA87DA87D7B51A87DA87DA851277DA87DA85252A8FD0EFFA8FD59
%7D4BA87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8FD11FFA8527D527D
%527D527D527D527D527D527D527D527D527D527D527D527D527D527D527D
%527D527D527D527D527D527D527D527D527D527D527D527D527D527D527D
%527D527D527D527D527D527D527D527D527D525220767DFF7644FD25FFA1
%6F4B6F4A6F4B6F4A6F4B6F4A6F4B6F4A6F4B6F4A6F4B6F4A6F4B6F4A6F4B
%6F4A6F4B6F4A6F4B6F4A6F4B6F4A6F4B6F4A6F4B6F4A6F4B6F4A6F4B6F4A
%6F4B6F4A6F4B6F4A6F4B6F4A6F4B6F4A6F4B6F4A6F4B4B204B6FA1A17644
%FD25FFCABBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2
%BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2
%BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BC44209A
%769A686FFD25FFCAC2BCC2BCC2BCC2BCC2BCC2BCC2BC7599BCBCC2BCC299
%C2BCC2BCC2BCBCBCC2BCC2BC759AC2BCC2BCC2BCC29AC2BCC2BCC2BCC2BC
%C2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BC
%C244A8FD07FF7D2752FD0D5152527D527D527D527D52FD09FFCFBBC299C2
%BBC299C2BBC299C2BBC2204B6F4B4B4BBB6F264B6F4B4B4B6F4B4B4BBB6F
%99204B6F4B6F4B754A4B6F4B4B756FC299C2BBC299C2BBC299C2BBC299C2
%BBC299C2BBC299C2BBC299C2BBC299C2BBC2996FFD06FF7D527DFF7AFD0D
%FE7CFD08FF7DFD09FFCAC2BCC2BCC2BCC2BCC2BCC2BCC2BC936F754B754B
%C24B756F75F84B4B754B754BC26F756F75264B6F27F8754B754B754BC2BC
%C2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BC
%C2BCC244FD04FF7D52A8FFFFFFA5FD0DFEA7FD08FF52FD09FFCFBCC2BBC2
%BCC2BBC2BCC2BBC2BCC2BBC2BCC26F6FBCC2BBC2BC992675BC9A6F6FBC9A
%BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2
%BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BB6FFFFFFF527DFFFFFFCFCF
%7AFD0DFE7DFD08FF7DFD09FFCAC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2
%BCC2BCC2BCC2BCC26FBC6F754B6F6F7526754B75BCC2BCC2BCC2BCC2BCC2
%BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2
%BCC2BCC2BCC244FFFFFF51A4A4A47AA4A4A47AA4A4A47AA4A4A47AA4A4A4
%7AA7FD08FF52FD09FFCA99C2BBC299C2BBC299C2BBC299C2BBC299C2BBC2
%99C2BBC2994B4B26204B20F8FD054BC2BBC299C2BBC299C2BBC299C2BBC2
%99C2BBC299C2BBC299C2BBC299C2BBC299C2BBC299C2BBC299C2BBC299C2
%6E6FFFFFFF7BFD14FE7CFD08FF7DFD09FFCAC2BCC2BCC2BCC2BCC2BCC2BC
%C2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BC
%C2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BCC2BC
%C2BCC2BCC2BCC2BCC2BC9344FFFFFF51FD14FEA7FD08FF52FD09FFCABBC2
%BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2
%BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2
%BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC2BCC2BBC26F9AFFFFFF517AA47AA4
%7AA47AA47AA47AA47AA47AA47AA47AA47CFD08FF7DFD09FFCA996F999399
%6F9993996F9993996F9993996F996F996F9993996F9993996F9993996F99
%93996F996F996F9993996F9993996F9993996F9993996F996F996F999399
%6F9993996F9993996F9993996F9993C2996F9AFFFFFF51FD14FEA7FD08FF
%52FD09FFA1204B204B204B204B204B204B204B204B204B204B204B204B20
%4B204B204B204B204B204B204B204B204B204B204B204B204B204B204B20
%4B204B204B204B204B204B204B204B204B204B204B204B204B274B2052FF
%FFFF7BFD08FE50FEFEA4FD08FE7CFD08FF7DFD09FFA85A355A595A355A59
%5A355A595A355A595A355A595A355A595A355A595A355A595A355A595A35
%5A595A355A595A355A595A355A595A355A595A355A595A355A595A355A59
%5A355A595A355A59350D361414141A59FFFFFF51FD06A4FE7AFE7A7A7AFE
%FD07A4A7FD08FF52FD0AFFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8
%AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9
%AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AF7E592E
%132F59357EFFFFFF7CFD07FE7A507A507AFD08FE7DFD08FF7DFD09FFFD04
%AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9
%AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAF
%AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAF5A0DFD07FF517AFD13FECFFD08FF
%52FD0AFFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF2F35FD06FF527B50
%7A5050267A7A5050507A507A50507A507AF87A7CFD08FF7DFD09FFFD04AF
%A9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AF
%AFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAF
%A9AFAFAFA9AFAFAFA9AFAFAFA9AFAF3535FD06FF7D7B7A5050507A7A7A50
%7A7A7A26F8507A7A2650F8507DFD08FF52FD0AFFA8AFA9AFA8AFA9AFA8AF
%A9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AF
%A8AFA9AFA8AFA9AFA8AFA9AF8459A9A884A8A9AF847D84AFA8AFA9AF84AF
%A9AFA8AFA9AFA8AF2F59FD07FFCEFD0CFE7A7AFD06FECEFD08FF7DFD09FF
%AFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAF
%A9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAF59A97D595327AF
%AF598452597D52595253525959A8A9AFAFAFA93559FD07FF51FEFE7AA4FE
%A4FEFEFEA4FD0AFEA7FD08FF52FD0AFFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFA8AFA8AFA8AF525952595252A8AF5259525928F852592E52F8F8A8AF
%A8AFA8840CA8FD07FF517A7AA4A4507A507A507A5050507A50507AA4A4A4
%7CFD08FF7DFD0AFFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9
%AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAF
%AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAF5935FD08FF
%51FE7A7A7A50F87A50FD047A50267A26F8FEFEFEA7FD08FF52FD0AFFA9AF
%A8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AF
%A9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AF597EA8AF84AFA8AFA97E
%52A8A9AF84AF84AFA8A8A9AFA8AFA9350DFD08FF7BFD14FE7DFD08FF7DFD
%0AFFAFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9
%AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAF59A9527D592752
%7D84AF5259277D52532E7D7D53F87D7DAFA9AF3559FD08FF51A4A4A47AA4
%A4A47AA4A4A47AA4A4A47AA4A4A47AA7FD08FF52FD0AFFA8AFA8AFA8AFA8
%AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8
%AFA8AFA8AFA8AFA8AFA8AFA8AFA87E52522859F82752AFA852525952522E
%27525905F8277DA8AFA83535FD08FF7BFEFEFE7A50A4FEFEA4FEFE7AA4FE
%FEFEA4FEFEFE7CFD08FF7DFD0AFFAFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9
%AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAF
%AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAF59A884AFA9AFAFAFA9
%AF0D84FD08FF51FEFE7A507A507A507AFE7AA4A4507A7A7AFEFEFEA7FD08
%FF52FD0AFFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8
%AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9
%AFA8AFA9AFA8AFA9AFA8AFA9AFA8AF7DA8A8AFA9AF5913A8FD08FF7BFEFE
%5050507A505050FE7A7A7A50F85050FEFEFE7CFD08FF7DFD0AFFAFA9AFAF
%AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9
%AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAF
%AFA9AFAFAFA9AF848484AFAF5A0DFD09FF51A47AA47AA47AA4A4A47AA4A4
%A47A7AA47A7AA4A4A7FD08FF52FD0AFFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8A8
%272E3535FD09FF7BFD08FEA4A4FD0AFE7CFD08FF7DFD0AFFAFA9AFAFAFA9
%AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAF
%AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9
%AFAFAFA9AFAFAFA9AF843535FD09FF51FD07FEA4A4FD0BFEA7FD08FF52FD
%0AFFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AF
%A9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AF
%A8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AF0D59FD09FF517AA47AA47A7A
%7AA47AA47AA47AA47AA47AA47AA47CFD08FF7DFD0AFFAFAFAFA9AFAFAFA9
%AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAF
%AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9
%AFAFAFA9AFAFAF843659FD09FF51FEA4A4A4FD10FEA7FD08FF52FD0AFFA8
%AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8
%AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8
%AFA8AFA87D848452847DAFA8AFA8590DFD09FFA8517AFD13FE7CFD08FF7D
%FD0AFFAFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAF
%A9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AF527D527D
%7DAF5284AF7D59AF535952595959A9AFAFAF3535FD08FFA8A851FD14A4A7
%FD08FF52FD0AFFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9
%AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8
%5252522E59A9522EAF5959A8525259275952AFA8AFA9350DFD05FF7DA8A8
%FFFF7BFD14FE7CFD08FF7DFD0AFFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAF
%7D7DAF848484AFAF7D84AFAFAFA9AFAFA8A9AFAFAFA97D52AFA9AF84AF84
%AFAFA8A9AFAFAFA9AFAFAFA9AF2E7DA9AFAFAFA9AFAFAFA9AFAFAFA9AF35
%5AFFFFA8A8A8FD05FF51FD14FEA7FD08FF52FD0AFFA8AFA8AFA8AFA8AFA8
%AFA8AFA8AFA8AF5259527D2752A87D845927A828522E7D27592E59A8AF27
%592E592E5228595259055959AFA8AFA8AFA8AFA8AFA88484AFA8AFA8AFA8
%AFA8AFA8AFA81359FFA8FD08FF7BFD14FE7CFD08FF7DFD0AFFAFA9AFAFAF
%A9AFAFAFA9AFAFAFA9AFAF52527D535952AF7D59527D7D27527D5352F827
%53AFA95253595252522E52522827277DAFAFA9AFAFAFA9AFAFAFA9AF84AF
%A9AFAFAFA9AFAFAFA9851359FD0AFF52FD14A6CFFD08FF52FD0AFFA9AFA8
%AFA9AFA8AFA9AFA8AFA9AFA8AFA9AF52A8A9AFA8A884AFA87D59AFA8AF84
%AFA8AFA9AFA85984AFA8AF52AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8
%A884AFA8AFA9AFA8A87DA935142FFD0AFF7DFD1DFF7DFD0AFFAFAFAFA9AF
%AFAFA9AFAFAFA9AFAFAFA9AF59595259527D527DAFAF2E527D535227597D
%5284AF7D527D525959F85953527DAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9A9
%52AFA9AF7D8484AFAF59145AFD0AFF527D527D527D527D527D527D527D52
%7D527D527D527D527D527D527D527D52FD0AFFA8AFA8AFA8AFA8AFA8AFA8
%AFA8AFA8AFA88452F8525928F852AFA85952590552F859285252AF7D592E
%272E59F859285952AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA82E2E7E7DAFA8
%AFA8AF2F1459FD33FFAFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AF
%AFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAF
%A9AFAFAFA9AFAFAFA9AFAFAFA8847E84A9AFAFAFA9AFAF3513A8FD31FF7D
%7DA8A87DA8A8AF7D7E84AFA9AFA8AF84AFA8AFA9AFA8AFA9AFA8AFA9AFA8
%AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9
%AFA8847D84A8AFA9AFA8AFA9AFA8AF0D13FD32FF7DA859595252AFA97D7D
%287D595253525252535984AFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9
%AF84A8A9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AF7D7D2E5A355A355A35
%5A355A355A2E140D352E3535352FFD2CFF527D52595252A8AF2E59525927
%F852592E5205F8A8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF84
%A8A8AFA8AFA8AFA8AFA8AFA8AFA8AF7E7E7DAF59130684597E5935131413
%14140D1314140D13141435FD2EFFAFA9AFAFAFA9AFAFAFA98459A884AFAF
%AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAF84AFAFAFA9
%AFAFAFA9AFAFAFA8847EAFA9AFAF841436FD05FF840D130D130C350D350C
%1A141435FD2EFFA9A8A8AFA9AFA8AFA9AF2E5227592E7DA9AFA8AFA9AFA8
%AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AF8484A9AFA8AFA9AFA8847D
%2E0D597D847DA8595959FD0EFF7E597E5984FD2EFFAF52525959595352AF
%AF592727525952AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAF
%A9AFAFAF84A8AFAFA9AF7D8484AF35147DFD48FFA859525952520559A8AF
%A8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFA8AF847D527E2E132EA87D7D59A8FD48FFAFAFAFA9AFAFAFA984AFAF
%A9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AF
%AFAF84845228A85A145AFD4DFFA8AFA9AFA8AFA9AF8484A9AFA8AFA9AFA8
%AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8847D590C2F7D
%A87D8484FD4DFFAFA9AFAFAFA9AFAFAF7DAFAFAFA9AFAFAFA9AFAFAFA9AF
%AFAFA9AFAFAFA9AFAFAFA9AFAFAFA9A97D84A9AF59142FFD05FFCBA27DA2
%7DA27DA27DA27DA27DA27DA27DA27DA27DA27DA27DA27DA27DA27DA27DA2
%7DA27DA27DA27DA27DA27DA27DA27DA27DA27DA27DA27DA27DA27DA27DA2
%7DA27DFD0AFFA8AFA8AFA8AFA8AFA8A97DAFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFA8AFA8AFA8AFA8AFA8AF7D7E840C06A87DA87DA8FFFFFFA8777DFD42
%A2A8FD09FFAFA9AFAFAFA9AFAFAFA984AFAFA9AFAFAFA9AFAFAFA9AFAFAF
%A9AFAFAFA9AFAFAF845953847D840C0DFD06FF7D7D77FD44A2CBFD09FFA9
%AFA8AFA9AFA8AFA9AFA884A9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8
%847DA80D147DFD07FFA87D77FD48A2FD09FFAFAFAFA9AFAFAFA9AFAFAF7D
%AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9A853597DA87E2E0C84FD07FFA8FD
%4AA2FD09FFA8AFA8AFA8AFA8AFA8AFA8AF7DAFA8AFA8AFA8AFA8AFA8AFA8
%A97D7E84592FFFFFFF2E357DFD07FF7DFD4AA2FD09FFAFAFAFA9AFAFAFA9
%AFAFAFA984AFAFA9AFAFAFA9AFAFAF847D2EA87DA85959FD0AFF777D777D
%FD1BA27D77774CA2527D4CFD28A2CBFD07FFA8AFA9AFA8AFA9AFA8AFA9AF
%7D27A9AFA8AFA9AF84847DA95913FD0FFF77FD1EA24C7727524C5221524C
%FD28A2A8FD05FFAFA87DA884A87DA884A87DA884A827A884A87D7D597D7D
%A8847D2EA8FD0EFF77FD1EA2524C5252774C77A252FD29A2FD05FFA88383
%7DA783837DA783837DA783837D837C7D7D7D2E2D272E2D2EFD0FFF77FD51
%A2FD04FFAE898289828982898289828982898289828982895E5852FD06FF
%A2777D777D777D777D777D777D77FD51A2A8FFFFFFAE8283828382838283
%8283828382825E5E585858A2777D777D7777777D77FD60A2FFFFA7898283
%82898283828982838283582D7DA2777DFD60A2777D777D777D7D7D777DA8
%FFAE82838283822D04835E822D58587777FD3FA2FD07777D777D777D777D
%77FD047DA27D7D7DA27DA27DA87DA27DA87DA27DA87DFD0CFFA889828982
%89582D277D83A2777D7DFD1CA27D777D777D77A27DA277A27DA277A27DA2
%7DA27DA27DA27DA87DA87DA87DA87DFD04A8FD31FFA8527C527C58FD047D
%77777D7777777D777D777D77A2777D7DA27D7D7DA87DA27DA87DA27DA87D
%A87DA8FD55FF7DFD04A87D7DA8A8A87DA8A8A87DFD06A8FF7DA8A8A87DA8
%A8A87DA8A8A87DA8A8FF7DA8FFA87DA8A8A87DA8A8A87DA8A8A87DA8FFA8
%7DFFA8A87DA8A8A87DA8A8A87DA8A8A87DFFFD06A87DA8A8A87DA8A8A87D
%FD06A8FFFD04A87DA8A8A87DA8A8A87DA8A8FFFD04A87DA8A8A87DFD04A8
%FFA827A8FD08FF7DFD75FF7D52FD09FFA8FD75FFA8A8FD09FF7DFD75FFA8
%A8FD09FFA8A8527D7DFD0AFF7DA8FFA87DFD62FFA8FD0BFFA852FF52FF52
%7D527D527DA8FF527D527D52A8FD62FFA8FD09FFA8527D7D7DFFFD047D27
%F8FFFF52FD047DA8FD62FFA8A8FD0CFF7DA8A8FD05FFA8FD6AFFA8FD0CFF
%7DA852FD047D52527D7D7DFD68FFA8FD0BFF527D527D27F8527D52F8277D
%FD69FFA8FD79FFA8FD06FFA8A8FD05FFA852FD04FFA8FD69FF527D527D52
%7DA87D5227FD047DFFFF52FD057D52FD69FF7D527D2752527D2752527D52
%7D52FFFF7DFF52527D527DA8FDFCFFFDFCFFFD6EFFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/exec_file
	statusdict /currentfilenameextend known{
		{
			0 () /SubFileDecode filter cvx exec
		}
	}{
		
		{cvx exec}
	}ifelse
def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		currentdict /lw_initializepage known not
			{
			/lw_initializepage /initializepage load def
			/initializepage
				{
				lw_initializepage
				/initializepage {} def
				}def
			}if
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 2230204-003.ai 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -488.473 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 488.473 li
571.561 488.473 li
571.561 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
8.94678 114.694 mo
8.79981 24.6402 li
28.1602 25.0801 li
28.3072 24.2002 li
46.7872 24.3467 li
65.2671 25.0801 li
65.4131 24.2002 li
84.48 25.3736 li
84.773 23.7603 li
103.694 26.6934 li
104.427 24.0538 li
122.614 27.1338 li
123.495 24.2002 li
142.854 29.48 li
144.467 24.3467 li
161.626 29.3335 li
163.094 26.1065 li
181.427 33.1465 li
183.774 27.7203 li
201.814 35.4937 li
205.774 27.8668 li
221.907 35.2002 li
221.907 35.2002 226.161 27.7203 226.161 28.3067 cv
226.161 28.8936 243.32 37.2535 243.32 37.2535 cv
249.041 28.7466 li
266.347 39.0137 li
271.92 30.9468 li
288.787 41.6539 li
295.095 33.44 li
309.907 43.7066 li
316.066 36.3736 li
331.467 46.3467 li
341.001 35.2002 li
357.28 48.4 li
367.106 38.5738 li
381.335 51.1866 li
391.454 42.2403 li
403.921 53.8267 li
416.387 42.3868 li
429.587 55.8799 li
445.427 43.5601 li
459.36 58.6666 li
476.081 45.9068 li
487.521 60.2803 li
500.134 50.6001 li
510.694 62.6265 li
498.227 72.8936 li
512.307 90.2002 li
476.814 114.841 li
464.641 100.321 li
445.721 115.134 li
434.574 102.374 li
417.267 115.134 li
406.561 101.787 li
389.841 115.427 li
377.814 102.667 li
362.854 115.281 li
353.026 104.281 li
340.854 115.281 li
329.415 102.814 li
316.36 115.281 li
306.534 105.014 li
296.706 115.134 li
284.241 104.721 li
274.854 115.281 li
263.415 106.187 li
256.227 115.134 li
243.32 104.574 li
234.667 115.281 li
221.467 106.48 li
215.161 114.987 li
202.254 107.067 li
197.121 115.134 li
184.066 107.947 li
179.96 115.427 li
166.907 109.561 li
163.681 115.281 li
150.92 109.414 li
148.134 115.427 li
132.586 108.974 li
129.947 115.427 li
117.041 111.614 li
115.427 115.281 li
101.495 110.587 li
100.026 115.427 li
85.9468 111.761 li
84.92 115.281 li
69.96 112.347 li
69.2271 115.427 li
54.2671 111.761 li
53.2403 115.281 li
39.4532 113.521 li
39.1602 115.281 li
25.813 114.694 li
8.94678 114.694 li
false sop
0.0313726 0.0196079 0.913726 0 cmyk
f
7.77295 180.4 mo
350.387 180.4 li
350.387 183.261 li
354.53 183.261 li
354.53 183.92 li
358.931 183.92 li
358.931 184.36 li
362.12 184.36 li
339.13 314.82 li
281.271 314.82 li
281.271 327.25 li
247.831 327.25 li
247.831 335.94 li
226.38 335.94 li
226.38 344.41 li
204.931 344.41 li
204.931 352.66 li
183.701 352.66 li
183.701 361.24 li
162.25 361.24 li
162.25 369.491 li
140.911 369.491 li
140.911 377.961 li
119.351 377.961 li
119.351 386.211 li
8.02979 386.211 li
0.192157 0.0313726 0.0392157 0 cmyk
f
8.02979 126.5 mo
378.62 126.5 li
378.62 127.931 li
378.145 127.931 li
378.145 128.517 li
380.345 128.517 li
380.345 156.934 li
378.145 156.934 li
378.145 174.057 li
372.167 174.057 li
372.167 176.734 li
8.0669 176.734 li
0.0235295 0.49804 0.501961 0.00392157 cmyk
f
102.864 147.15 mo
107.364 147.15 li
0.192157 0.0313726 0.0392157 0 cmyk
f
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
102.864 147.15 mo
107.364 147.15 li
0.0117648 0.960785 0.913726 0 cmyk
s
156.864 147.15 mo
175.197 147.15 li
0.192157 0.0313726 0.0392157 0 cmyk
f
156.864 147.15 mo
175.197 147.15 li
0.0117648 0.960785 0.913726 0 cmyk
s
399.999 151.9 mo
430.358 151.79 li
430.468 136.72 li
491.628 136.94 li
491.628 287.09 li
399.888 287.2 li
399.999 151.9 li
0.0313726 0.0196079 0.913726 0 cmyk
f
119.499 386.348 mo
119.572 377.84 li
124.118 378.208 li
124.118 386.348 li
119.499 386.348 li
0.913726 0.0588236 0.0431373 0.00392157 cmyk
f
140.985 369.26 mo
140.912 377.84 li
145.385 377.694 li
145.458 369.7 li
140.985 369.26 li
0.913726 0.0588236 0.0431373 0.00392157 cmyk
f
162.398 361.12 mo
169.732 361.268 li
169.732 373.881 li
162.398 373.881 li
162.398 361.12 li
0.913726 0.0588236 0.0431373 0.00392157 cmyk
f
183.812 352.834 mo
183.738 360.827 li
190.999 360.9 li
191.072 352.907 li
183.812 352.834 li
0.913726 0.0588236 0.0431373 0.00392157 cmyk
f
205.078 352.54 mo
205.078 344.4 li
212.412 344.475 li
212.412 352.688 li
205.078 352.54 li
0.913726 0.0588236 0.0431373 0.00392157 cmyk
f
226.345 344.254 mo
226.492 335.82 li
233.752 335.895 li
233.752 344.18 li
226.345 344.254 li
0.913726 0.0588236 0.0431373 0.00392157 cmyk
f
247.758 327.534 mo
247.685 335.527 li
255.165 335.6 li
255.165 327.607 li
247.758 327.534 li
0.913726 0.0588236 0.0431373 0.00392157 cmyk
f
281.272 314.92 mo
281.272 327.314 li
288.752 327.24 li
288.752 317.194 li
305.618 317.12 li
320.798 325.407 li
339.278 325.48 li
338.984 314.848 li
281.272 314.92 li
0.913726 0.0588236 0.0431373 0.00392157 cmyk
f
339.278 325.48 mo
354.458 325.48 li
354.458 326.141 li
373.524 326.067 li
373.452 314.7 li
346.685 314.774 li
351.085 289.84 li
348.225 289.547 li
366.265 184.534 li
381.738 184.387 li
381.665 177.714 li
359.078 177.714 li
358.933 180.207 li
350.718 180.354 li
350.938 183.287 li
354.458 183.214 li
354.532 183.727 li
359.005 183.654 li
359.005 184.46 li
362.085 184.46 li
339.278 314.848 li
339.278 325.48 li
0.913726 0.0588236 0.0431373 0.00392157 cmyk
f
0.88 lw
339.278 325.48 mo
354.458 325.48 li
354.458 326.141 li
373.524 326.067 li
373.452 314.7 li
346.685 314.774 li
351.085 289.84 li
348.225 289.547 li
366.265 184.534 li
381.738 184.387 li
381.665 177.714 li
359.078 177.714 li
358.933 180.207 li
350.718 180.354 li
350.938 183.287 li
354.458 183.214 li
354.532 183.727 li
359.005 183.654 li
359.005 184.46 li
362.085 184.46 li
339.278 314.848 li
339.278 325.48 li
cp
0.82353 0.0313726 0.054902 0 cmyk
s
7.95801 177.97 mo
358.693 177.97 li
358.693 179.84 li
7.90284 179.896 li
7.95801 177.97 li
0.913726 0.0588236 0.0431373 0.00392157 cmyk
f
8.2876 175.99 mo
8.2876 173.515 li
365.403 173.515 li
365.403 175.88 li
8.2876 175.99 li
0.0117648 0.960785 0.913726 0 cmyk
f
378.163 174.12 mo
372.278 174.23 li
372.388 176.32 li
381.134 176.65 li
381.519 176.65 li
381.519 164.275 li
381.794 164.165 li
381.794 160.315 li
381.464 160.37 li
381.464 159.6 li
381.849 159.6 li
381.794 132.65 li
383.718 132.54 li
383.663 128.47 li
383.388 128.415 li
383.333 126.16 li
386.193 126.105 li
386.193 128.25 li
385.753 128.36 li
385.753 132.54 li
386.634 132.485 li
388.448 130.67 li
402.858 130.67 li
402.913 131.88 li
408.634 131.88 li
408.798 131.44 li
410.613 131.44 li
410.558 119.23 li
408.854 119.175 li
408.798 118.68 li
405.773 118.735 li
405.773 128.8 li
393.894 128.91 li
393.233 128.36 li
389.933 128.47 li
389.933 124.565 li
386.908 124.62 li
386.854 125.665 li
378.933 125.665 li
378.823 127.865 li
378.328 127.92 li
378.273 128.36 li
380.419 128.47 li
380.474 156.905 li
378.218 157.126 li
378.163 174.12 li
0.0117648 0.960785 0.913726 0 cmyk
f
377.943 125.72 mo
377.999 126.271 li
8.12305 126.325 li
8.12305 125.72 li
377.943 125.72 li
0.0117648 0.960785 0.913726 0 cmyk
f
51.0777 416.891 mo
63.4527 411.17 li
68.5127 411.061 li
68.5679 409.465 li
92.3277 402.096 li
109.378 399.565 li
137.208 399.456 li
137.374 394.891 li
192.593 394.836 li
192.648 377.51 li
210.084 377.346 li
210.084 365.795 li
242.698 352.211 li
536.068 352.54 li
535.078 354.905 li
539.148 359.855 li
539.863 373.11 li
551.854 380.536 li
554.054 389.885 li
569.179 404.68 li
103.493 417.331 li
102.063 418.045 li
86.4981 417.77 li
84.8477 417 li
68.3477 418.211 li
68.0728 418.926 li
53.6626 417.495 li
52.7281 416.946 li
51.0777 416.891 li
0.188236 0.360785 0.0117648 0 cmyk
f
32.1578 415.295 mo
32.1578 414.526 li
32.983 414.36 li
32.983 412.381 li
39.1978 412.381 li
39.3077 411.665 li
42.9927 411.665 li
42.9927 410.126 li
46.5127 410.18 li
66.8628 404.571 li
69.5577 404.68 li
72.1431 403.745 li
72.1978 401.766 li
79.4029 399.84 li
79.6231 400.28 li
104.483 393.571 li
104.428 392.36 li
100.798 392.25 li
100.743 392.801 li
72.5831 400.391 li
68.898 400.391 li
68.8428 401.766 li
64.3331 401.711 li
64.3331 400.776 li
69.8877 398.465 li
73.188 398.465 li
73.2427 399.016 li
97.003 392.415 li
97.003 391.426 li
124.063 391.426 li
124.008 392.196 li
107.288 392.36 li
107.233 393.68 li
74.1778 402.426 li
74.1778 404.846 li
46.3477 412.27 li
42.8829 412.27 li
42.8829 413.151 li
41.7828 413.206 li
41.7281 414.36 li
33.5879 414.36 li
33.5328 415.295 li
32.1578 415.295 li
0.925491 0.0745098 0.937255 0.0117648 cmyk
f
0.264 lw
2 lc
1 lj
29.5748 422.961 mo
23.9644 416.889 li
8.12452 416.889 li
0 0 0 1 cmyk
s
1.1 lw
568.792 405.077 mo
114.913 417.483 li
103.561 417.549 li
102.174 418.21 li
86.4659 418.143 li
84.6182 417.352 li
68.4483 418.606 li
68.25 419.266 li
53.2686 417.749 li
53.2686 417.022 li
24.3609 417.022 li
24.1622 417.088 li
0 0 0 1 cmyk
s
50.4634 416.792 mo
63.482 410.95 li
68.2832 410.901 li
68.2832 409.416 li
92.1919 401.991 li
109.419 399.366 li
136.989 399.268 li
136.989 394.516 li
192.331 394.516 li
192.331 377.092 li
209.803 377.141 li
209.803 365.608 li
242.819 352.045 li
535.659 352.094 li
0.188236 0.360785 0.0117648 0 cmyk
f
0 lj
50.4634 416.792 mo
63.482 410.95 li
68.2832 410.901 li
68.2832 409.416 li
92.1919 401.991 li
109.419 399.366 li
136.989 399.268 li
136.989 394.516 li
192.331 394.516 li
192.331 377.092 li
209.803 377.141 li
209.803 365.608 li
242.819 352.045 li
535.659 352.094 li
0 0 0 1 cmyk
s
0.44 lw
8.19092 386.348 mo
127.931 386.348 li
127.931 386.893 li
104.319 386.893 li
104.319 386.348 li
0 0 0 1 cmyk
s
0.88 lw
0 lc
120.11 377.983 mo
145.553 377.983 li
0 0 0 1 cmyk
s
2 lc
119.517 386.299 mo
119.517 377.735 li
120.159 377.735 li
0 0 0 1 cmyk
s
124.119 377.983 mo
124.119 386.299 li
0 0 0 1 cmyk
s
140.9 377.735 mo
140.9 369.27 li
141.494 369.27 li
0 0 0 1 cmyk
s
145.454 369.569 mo
145.454 377.735 li
0 0 0 1 cmyk
s
0 lc
141.543 369.569 mo
166.541 369.569 li
0 0 0 1 cmyk
s
104.319 386.596 mo
104.319 386.596 li
127.881 386.596 li
0 0 0 1 cmyk
s
2 lc
162.828 360.855 mo
162.283 360.855 li
162.283 369.321 li
162.283 374.122 li
169.808 374.122 li
169.808 361.4 li
0 0 0 1 cmyk
s
162.283 369.321 mo
169.808 369.321 li
0 0 0 1 cmyk
s
162.878 361.152 mo
191.241 361.152 li
0 0 0 1 cmyk
s
184.063 352.787 mo
212.576 352.787 li
0 0 0 1 cmyk
s
184.113 352.49 mo
183.668 352.49 li
183.668 360.855 li
0 0 0 1 cmyk
s
191.241 352.936 mo
191.241 360.855 li
0 0 0 1 cmyk
s
205.695 344.322 mo
234.108 344.322 li
0 0 0 1 cmyk
s
0 lc
205.546 344.025 mo
204.953 344.025 li
204.953 352.49 li
0 0 0 1 cmyk
s
212.626 344.223 mo
212.626 352.49 li
0 0 0 1 cmyk
s
2 lc
226.881 335.809 mo
255.294 335.809 li
0 0 0 1 cmyk
s
226.881 335.562 mo
226.336 335.562 li
226.336 344.025 li
0 0 0 1 cmyk
s
233.959 335.809 mo
233.959 344.025 li
0 0 0 1 cmyk
s
248.166 327.195 mo
247.721 327.195 li
247.721 335.562 li
0 0 0 1 cmyk
s
255.294 327.443 mo
255.294 335.562 li
0 0 0 1 cmyk
s
248.166 327.443 mo
248.166 327.443 li
288.903 327.443 li
0 0 0 1 cmyk
s
281.231 327.195 mo
281.231 314.82 li
282.766 314.82 li
282.766 317.148 li
288.854 317.148 li
288.854 327.195 li
0 0 0 1 cmyk
s
282.766 314.82 mo
339.229 314.82 li
339.229 325.545 li
0 0 0 1 cmyk
s
288.854 317.148 mo
305.7 317.148 li
320.831 325.48 li
338.354 325.513 li
0 0 0 1 cmyk
s
338.751 325.544 mo
339.229 325.545 li
354.491 325.513 li
354.491 314.82 li
346.769 314.82 li
351.323 289.576 li
348.253 289.576 li
366.47 184.538 li
381.913 184.538 li
381.913 177.806 li
358.946 177.806 li
358.946 180.182 li
350.63 180.182 li
350.63 183.251 li
354.491 183.251 li
354.491 183.746 li
358.946 183.746 li
358.946 184.538 li
362.114 184.538 li
339.229 314.82 li
0 0 0 1 cmyk
s
354.491 314.82 mo
373.499 314.723 li
373.499 326.305 li
352.907 326.305 li
352.808 325.513 li
0 0 0 1 cmyk
s
358.946 177.806 mo
8.19092 177.806 li
0 0 0 1 cmyk
s
8.19092 180.182 mo
350.63 180.182 li
0 0 0 1 cmyk
s
0.44 lw
380.974 176.717 mo
8.19092 176.717 li
0 0 0 1 cmyk
s
1 lc
8.19092 176.024 mo
8.19092 173.5 li
365.528 173.5 li
365.528 176.024 li
8.19092 176.024 li
cp
0 0 0 1 cmyk
s
52.8892 173.5 mo
52.8892 176.024 li
0 0 0 1 cmyk
s
97.5381 173.5 mo
97.5381 176.024 li
0 0 0 1 cmyk
s
142.137 173.5 mo
142.137 176.024 li
0 0 0 1 cmyk
s
186.786 173.5 mo
186.786 176.024 li
0 0 0 1 cmyk
s
231.484 173.5 mo
231.484 176.024 li
0 0 0 1 cmyk
s
276.133 173.5 mo
276.133 176.024 li
0 0 0 1 cmyk
s
320.781 173.5 mo
320.781 176.024 li
0 0 0 1 cmyk
s
2 lc
385.726 128.455 mo
393.249 128.455 li
393.794 128.95 li
408.792 128.95 li
408.792 132.068 li
402.802 132.068 li
402.802 130.831 li
388.546 130.831 li
386.716 132.662 li
381.913 132.662 li
381.913 159.689 li
381.616 159.689 li
381.616 160.333 li
381.913 160.333 li
381.913 164.342 li
381.616 164.342 li
381.616 176.964 li
381.121 176.915 li
381.072 176.42 li
372.212 176.371 li
372.212 174.094 li
378.151 174.094 li
378.151 156.967 li
380.379 156.967 li
380.379 128.455 li
383.844 128.455 li
0 0 0 1 cmyk
s
1 lc
378.169 165.431 mo
380.363 165.431 li
380.363 160.085 li
381.601 160.085 li
0 0 0 1 cmyk
s
379.571 164.573 mo
379.571 163.649 li
380.231 163.649 li
380.231 164.573 li
379.571 164.573 li
0 0 0 1 cmyk
f
379.571 164.573 mo
379.571 163.649 li
380.231 163.649 li
380.231 164.573 li
379.571 164.573 li
cp
0 0 0 1 cmyk
s
381.286 128.521 mo
381.286 129.461 li
382.475 129.461 li
382.475 128.521 li
381.286 128.521 li
0 0 0 1 cmyk
f
2 lc
381.286 128.521 mo
381.286 129.461 li
382.475 129.461 li
382.475 128.521 li
381.286 128.521 li
cp
0 0 0 1 cmyk
s
0.264 lw
383.201 134.807 mo
386.304 134.807 li
386.304 132.943 li
383.201 132.877 li
383.201 134.807 li
cp
0 0 0 1 cmyk
s
383.729 132.547 mo
383.729 128.653 li
0 0 0 1 cmyk
s
1.76 lw
399.437 184.809 mo
399.437 149.393 li
428.542 134.543 li
532.097 134.543 li
532.097 297.694 li
399.437 297.893 li
399.437 206.913 li
0 0 0 1 cmyk
s
0.88 lw
491.901 186.914 mo
491.901 136.919 li
430.522 136.919 li
430.522 151.967 li
0 0 0 1 cmyk
s
400.229 287.2 mo
491.901 287.2 li
491.901 206.914 li
0 0 0 1 cmyk
s
400.427 151.967 mo
491.804 151.868 li
0 0 0 1 cmyk
s
491.604 166.916 mo
400.427 167.015 li
0 0 0 1 cmyk
s
460.294 181.898 mo
491.604 181.865 li
0 0 0 1 cmyk
s
400.526 181.964 mo
400.526 181.963 428.719 181.933 428.719 181.933 cv
0 0 0 1 cmyk
s
483.451 212.15 mo
491.507 212.159 li
0 0 0 1 cmyk
s
400.427 212.06 mo
406.581 212.066 li
0 0 0 1 cmyk
s
400.427 227.009 mo
491.507 227.009 li
0 0 0 1 cmyk
s
400.427 242.057 mo
491.604 241.958 li
0 0 0 1 cmyk
s
400.427 257.006 mo
491.407 257.105 li
0 0 0 1 cmyk
s
400.427 272.054 mo
491.604 271.955 li
0 0 0 1 cmyk
s
0.44 lw
10.4527 420.213 mo
335.515 292.008 li
0 0 0 1 cmyk
s
360.09 282.525 mo
445.509 248.68 li
0 0 0 1 cmyk
s
1.76 lw
532.725 49.9024 mo
532.725 100.838 li
499.956 115.902 li
7.33497 115.902 li
0 0 0 1 cmyk
s
0 lc
521.156 49.2056 mo
521.156 84.8946 li
514.539 89.3331 li
0 0 0 1 cmyk
s
521.354 84.8453 mo
523.036 84.8946 li
523.036 104.398 li
0 0 0 1 cmyk
s
0.264 lw
2 lc
385.823 132.505 mo
385.823 128.612 li
0 0 0 1 cmyk
s
0.176 lw
383.894 132.613 mo
383.894 126.821 li
385.726 126.772 li
385.676 132.514 li
0 0 0 1 cmyk
s
383.993 126.228 mo
384.042 126.673 li
385.576 126.624 li
385.626 126.228 li
0 0 0 1 cmyk
s
0.44 lw
380.132 128.455 mo
378.201 128.455 li
378.201 127.91 li
378.796 127.91 li
378.796 125.683 li
386.864 125.683 li
386.864 124.693 li
0 0 0 1 cmyk
s
0.264 lw
383.349 128.455 mo
383.349 126.178 li
386.171 126.178 li
386.171 128.455 li
0 0 0 1 cmyk
s
389.884 124.693 mo
389.884 128.455 li
0 0 0 1 cmyk
s
0.176 lw
377.458 126.376 mo
377.458 126.624 li
378.201 126.624 li
378.201 127.514 li
378.548 127.465 li
378.597 125.683 li
378.201 125.683 li
378.201 126.376 li
377.458 126.376 li
cp
0 0 0 1 cmyk
s
0.264 lw
8.19092 125.683 mo
378.003 125.683 li
378.003 126.376 li
8.19092 126.376 li
0 0 0 1 cmyk
s
0.66 lw
8.19092 124.148 mo
390.823 124.148 li
0 0 0 1 cmyk
s
0.264 lw
385.081 120.881 mo
385.081 124.148 li
0 0 0 1 cmyk
s
388.448 120.881 mo
388.448 124.148 li
0 0 0 1 cmyk
s
0.44 lw
379.934 124.495 mo
397.853 124.495 li
0 0 0 1 cmyk
s
0.528 lw
388.844 120.733 mo
8.19092 120.733 li
0 0 0 1 cmyk
s
0.264 lw
32.1485 415.305 mo
33.6006 415.372 li
33.6006 414.448 li
41.8506 414.448 li
41.8506 413.26 li
42.9722 413.26 li
42.9722 412.336 li
46.3223 412.336 li
74.2559 404.926 li
74.2559 402.42 li
107.323 393.708 li
107.323 392.403 li
104.469 392.403 li
104.484 393.659 li
79.6685 400.323 li
79.4698 399.795 li
72.1446 401.776 li
72.1446 403.739 li
69.5542 404.547 li
66.9146 404.547 li
46.5196 410.026 li
42.9722 410.026 li
42.9722 411.61 li
40.167 411.543 li
39.211 411.61 li
39.211 412.336 li
32.941 412.336 li
32.941 414.448 li
32.1485 414.581 li
32.1485 415.305 li
cp
0 0 0 1 cmyk
s
64.1749 401.84 mo
68.9107 401.909 li
68.9107 400.522 li
72.5401 400.456 li
100.854 392.866 li
100.839 392.403 li
124.136 392.403 li
124.136 391.413 li
96.96 391.413 li
96.96 392.403 li
73.3321 398.987 li
73.3321 398.46 li
69.8843 398.46 li
64.2906 400.704 li
64.1749 401.84 li
cp
0 0 0 1 cmyk
s
0.352 lw
8.19092 118.753 mo
408.792 118.753 li
408.792 128.95 li
0 0 0 1 cmyk
s
408.841 120.684 mo
409.188 120.684 li
409.188 121.228 li
408.841 121.228 li
408.841 120.684 li
0 0 0 1 cmyk
f
0.176 lw
408.841 120.684 mo
409.188 120.684 li
409.188 121.228 li
408.841 121.228 li
408.841 120.684 li
cp
0 0 0 1 cmyk
s
408.841 129.247 mo
409.188 129.247 li
409.188 129.791 li
408.841 129.791 li
408.841 129.247 li
0 0 0 1 cmyk
f
408.841 129.247 mo
409.188 129.247 li
409.188 129.791 li
408.841 129.791 li
408.841 129.247 li
cp
0 0 0 1 cmyk
s
0.44 lw
405.724 118.753 mo
405.724 128.801 li
0 0 0 1 cmyk
s
0.352 lw
408.792 119.149 mo
410.673 119.149 li
410.673 131.523 li
408.792 131.523 li
0 0 0 1 cmyk
s
0.44 lw
405.724 121.525 mo
408.792 121.525 li
0 0 0 1 cmyk
s
1.76 lw
0 lc
477.448 114.81 mo
515.067 88.6729 li
0 0 0 1 cmyk
s
0.44 lw
2 lc
1 lj
4.47803 422.928 mo
11.607 422.928 li
0 0 0 1 cmyk
s
8.042 419.415 mo
8.042 426.542 li
0 0 0 1 cmyk
s
0 lc
[66 5.28 8.8 5.28 ] 0 dsh
16.9029 422.928 mo
568.526 422.928 li
0 0 0 1 cmyk
s
0 0 0 1 cmyk
%%IncludeResource: font Helvetica
/Helvetica*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 4{/.notdef}repeat /period /.notdef 
/zero 2{/.notdef}repeat /three 5{/.notdef}repeat /nine 3{/.notdef}repeat /equal 5{/.notdef}repeat 
/C /D /E 3{/.notdef}repeat /I 5{/.notdef}repeat /O /P 
/.notdef /R /S 13{/.notdef}repeat /a /b /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /.notdef /r /s /t 
/u 138{/.notdef}repeat
] /Helvetica nfnt
/Helvetica*1 findfont [14 0 0 -14 0 0 ]mfnt sfnt
434.574 186.157 mov
(CsI) sh
394.884 203.157 mov
(Electromagnetic) sh
408.898 220.157 mov
(Calorimeter) sh
411.761 239.63 mov
(\(End  Cap\)) sh
207.228 57.3364 mov
(CsI   ) sh
173.373 74.3364 mov
(Electromagnetic) sh
187.386 91.3364 mov
(Calorimeter) sh
242.947 215.92 mov
(Drift  Chamber) sh
239.427 232.92 mov
(Outer  Endplate) sh
80.0459 288.64 mov
(Drift  Chamber  Endplate) sh
86.6597 305.64 mov
(Small  Radius  Section) sh
/Helvetica*1 findfont [14 -0.0363159 -0.0363159 -14 0 0 ]mfnt sfnt
1.58643 320.248 mov
0 -0.000274658 97 (Drift  Chamber) wsh
13.679 337.216 mov
1.52588e-05 -0.000259399 107 (Inner  Skin) wsh
/Helvetica*1 findfont [14 0 0 -14 0 0 ]mfnt sfnt
245.764 279.06 mov
(cos     = 0.93) sh
3.91748 482.225 mov
(Interaction  Point) sh
304.002 300.499 mo
303.291 299.156 302.913 298.199 302.425 297.04 cv
299.271 300.163 li
299.705 300.32 301.378 301.05 302.713 301.775 cv
304.143 302.551 305.364 303.327 306.091 303.898 cv
305.528 303.166 304.763 301.938 304.002 300.499 cv
0 0 0 1 cmyk
f
2 lc
0 lj
[] 0 dsh
284.436 281.984 mo
304.408 302.16 li
0 0 0 1 cmyk
s
345.524 248.337 mo
344.425 247.29 343.763 246.503 342.932 245.559 cv
340.932 249.522 li
341.394 249.533 343.212 249.693 344.708 249.957 cv
346.311 250.238 347.716 250.586 348.585 250.897 cv
347.819 250.382 346.703 249.459 345.524 248.337 cv
0 0 0 1 cmyk
f
314.902 233.873 mo
346.438 249.784 li
0 0 0 1 cmyk
s
70.3096 383.874 mo
70.0435 382.377 69.9766 381.352 69.8658 380.098 cv
65.9073 382.108 li
66.2735 382.391 67.6421 383.596 68.6924 384.696 cv
69.8165 385.87 70.7427 386.983 71.2593 387.749 cv
70.9473 386.879 70.5953 385.475 70.3096 383.874 cv
0 0 0 1 cmyk
f
46.9493 339.794 mo
70.1895 385.581 li
0 0 0 1 cmyk
s
216.615 340.138 mo
215.837 338.832 215.412 337.896 214.867 336.762 cv
211.872 340.038 li
212.313 340.174 214.021 340.819 215.39 341.477 cv
216.857 342.181 218.117 342.896 218.87 343.43 cv
218.272 342.727 217.446 341.536 216.615 340.138 cv
0 0 0 1 cmyk
f
185.351 312.752 mo
217.103 341.777 li
0 0 0 1 cmyk
s
0 0 0 1 cmyk
/Helvetica*1 findfont [14 0 0 -14 0 0 ]mfnt sfnt
329.73 386.641 mov
(CESR) sh
11.4229 428.542 mo
11.9942 429.95 12.2735 430.94 12.6421 432.143 cv
16.0962 429.354 li
15.6792 429.153 14.0894 428.258 12.834 427.403 cv
11.4898 426.487 10.3531 425.588 9.68848 424.95 cv
10.1744 425.733 10.8111 427.034 11.4229 428.542 cv
0 0 0 1 cmyk
f
43.4371 466.801 mo
11.1866 426.848 li
0 0 0 1 cmyk
s
0 0 0 1 cmyk
%%IncludeResource: font Helvetica
/Helvetica*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 3{/.notdef}repeat /hyphen /period 
/.notdef /zero /.notdef /two /three /four 4{/.notdef}repeat /nine 
3{/.notdef}repeat /equal 5{/.notdef}repeat /C /D /E 3{/.notdef}repeat /I 
5{/.notdef}repeat /O /P /.notdef /R /S 13{/.notdef}repeat /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /.notdef 
/r /s /t /u 138{/.notdef}repeat
] /Helvetica nfnt
/Helvetica*1 findfont [14 0 0 -14 0 0 ]mfnt sfnt
452.117 14.0786 mov
(2230204-003) sh
0.264 lw
32.1485 415.305 mo
7.33301 415.305 li
0 0 0 1 cmyk
s
96.96 391.413 mo
7.7002 391.413 li
0 0 0 1 cmyk
s
0 0 0 1 cmyk
%%IncludeResource: font Helvetica
/Helvetica*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 3{/.notdef}repeat /hyphen /period 
/.notdef /zero /.notdef /two /three /four 4{/.notdef}repeat /nine 
3{/.notdef}repeat /equal 5{/.notdef}repeat /C /D /E 3{/.notdef}repeat /I 
5{/.notdef}repeat /O /P /.notdef /R /S 6{/.notdef}repeat /Z 
6{/.notdef}repeat /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u 138{/.notdef}repeat
] /Helvetica nfnt
/Helvetica*1 findfont [14 0 0 -14 0 0 ]mfnt sfnt
74.4268 448.859 mov
(ZD Inner Drift) sh
87.644 465.859 mov
(Chamber) sh
272.836 274.596 mo
272.836 274.596 272.984 270.531 275.834 270.561 cv
275.834 270.561 279.201 270.207 278.867 275.834 cv
278.867 275.834 278.928 280.399 275.766 280.252 cv
275.766 280.252 272.477 280.62 272.836 274.596 cv
0 0 0 1 cmyk
f
0 lw
272.836 274.596 mo
272.836 274.596 272.984 270.531 275.834 270.561 cv
275.834 270.561 279.201 270.207 278.867 275.834 cv
278.867 275.834 278.928 280.399 275.766 280.252 cv
275.766 280.252 272.477 280.62 272.836 274.596 cv
cp
0 0 0 1 cmyk
s
277.525 274.832 mo
274.137 274.832 li
274.137 274.832 274.227 272.312 274.555 271.826 cv
274.555 271.826 274.938 270.781 275.969 270.898 cv
275.969 270.898 277.129 270.825 277.4 272.607 cv
277.4 272.607 277.555 273.462 277.525 274.832 cv
0.192157 0.0313726 0.0392157 0 cmyk
f
277.525 274.832 mo
274.137 274.832 li
274.137 274.832 274.227 272.312 274.555 271.826 cv
274.555 271.826 274.938 270.781 275.969 270.898 cv
275.969 270.898 277.129 270.825 277.4 272.607 cv
277.4 272.607 277.555 273.462 277.525 274.832 cv
cp
0 0 0 1 cmyk
s
277.512 275.332 mo
274.152 275.332 li
274.152 275.332 274.08 278.41 274.703 279.31 cv
274.703 279.31 275.123 279.943 275.881 279.913 cv
275.881 279.913 277.201 280.002 277.375 278.014 cv
277.375 278.014 277.566 275.922 277.512 275.332 cv
0.192157 0.0313726 0.0392157 0 cmyk
f
277.512 275.332 mo
274.152 275.332 li
274.152 275.332 274.08 278.41 274.703 279.31 cv
274.703 279.31 275.123 279.943 275.881 279.913 cv
275.881 279.913 277.201 280.002 277.375 278.014 cv
277.375 278.014 277.566 275.922 277.512 275.332 cv
cp
0 0 0 1 cmyk
s
0 0 0 1 cmyk
%%IncludeResource: font Helvetica
/Helvetica*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 3{/.notdef}repeat /hyphen /period 
/.notdef /zero /.notdef /two /three /four 4{/.notdef}repeat /nine 
3{/.notdef}repeat /equal 5{/.notdef}repeat /C /D /E 3{/.notdef}repeat /I 
5{/.notdef}repeat /O /P /.notdef /R /S 6{/.notdef}repeat /Z 
6{/.notdef}repeat /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u /v 137{/.notdef}repeat
] /Helvetica nfnt
/Helvetica*1 findfont [14 0 0 -14 0 0 ]mfnt sfnt
70.6206 145.86 mov
(Ring Imaging Cherenkov) sh
121.207 162.86 mov
(Detector) sh
1 lw
0 lc
70.3633 147.15 mo
80.6963 147.15 li
0.0117648 0.960785 0.913726 0 cmyk
s
7.58985 391.418 mo
96.9468 391.418 li
96.9468 392.409 li
73.3702 399.008 li
73.3702 398.458 li
69.9239 398.458 li
64.2769 400.659 li
64.2769 401.868 li
68.9341 401.868 li
68.9341 400.547 li
72.5269 400.547 li
100.871 392.883 li
100.871 392.409 li
104.427 392.409 li
104.427 393.655 li
79.6768 400.364 li
79.4571 399.813 li
72.1241 401.758 li
72.1241 403.774 li
69.5933 404.543 li
66.917 404.543 li
46.4932 410.043 li
42.9732 410.043 li
42.9732 411.622 li
39.1968 411.622 li
39.1968 412.391 li
32.9629 412.391 li
32.9629 414.444 li
32.1202 414.59 li
32.0831 415.288 li
7.33301 415.288 li
0.4 0.0117648 0.501961 0 cmyk
f
34.9019 409.016 mo
35.6944 410.311 36.129 411.245 36.6876 412.372 cv
39.6456 409.061 li
39.2022 408.93 37.4878 408.305 36.1099 407.663 cv
34.6363 406.975 33.3687 406.276 32.6089 405.75 cv
33.2159 406.446 34.0547 407.626 34.9019 409.016 cv
0 0 0 1 cmyk
f
0.44 lw
2 lc
72.6817 441.594 mo
34.3951 407.381 li
0 0 0 1 cmyk
s
0.88 lw
9.02002 24.585 mo
28.2701 25.1353 li
25.7403 115.775 li
8.91016 115.446 li
9.02002 24.585 li
cp
0 0 0 1 cmyk
s
28.2701 25.1353 mo
28.2701 24.1451 li
46.75 24.3653 li
39.0499 115.666 li
25.7403 114.346 li
0 0 0 1 cmyk
s
39.1602 113.686 mo
53.46 115.886 li
65.3399 25.1353 li
46.8599 23.815 li
46.75 24.3653 li
0 0 0 1 cmyk
s
65.3399 25.1353 mo
65.4502 24.1451 li
84.5899 25.355 li
69.19 115.775 li
54.0103 111.926 li
0 0 0 1 cmyk
s
69.7403 112.366 mo
84.92 115.666 li
103.951 26.565 li
84.8101 23.7051 li
84.5899 25.355 li
0 0 0 1 cmyk
s
84.8101 23.7051 mo
87.4502 8.19532 li
0 0 0 1 cmyk
s
103.951 26.565 mo
104.5 23.7051 li
122.761 27.0049 li
99.9903 115.775 li
85.69 111.815 li
0 0 0 1 cmyk
s
101.201 110.716 mo
115.61 115.775 li
143.11 29.4253 li
123.53 24.0352 li
122.761 27.0049 li
0 0 0 1 cmyk
s
143.11 29.4253 mo
144.761 24.4751 li
161.92 29.4253 li
130.021 115.886 li
116.931 111.596 li
0 0 0 1 cmyk
s
132.44 109.065 mo
148.28 115.666 li
181.831 33.0552 li
163.13 25.9053 li
161.92 29.4253 li
0 0 0 1 cmyk
s
163.13 25.9053 mo
169.73 7.9751 li
0 0 0 1 cmyk
s
179.215 83.5113 mo
163.9 115.775 li
150.701 109.616 li
0 0 0 1 cmyk
s
181.831 33.0552 mo
184.03 27.4454 li
202.07 35.3653 li
193.485 53.4517 li
0 0 0 1 cmyk
s
217.364 44.5372 mo
222.311 35.1451 li
205.701 27.5552 li
202.07 35.3653 li
0 0 0 1 cmyk
s
166.761 109.616 mo
179.851 115.775 li
191.646 93.3755 li
0 0 0 1 cmyk
s
209.754 94.2798 mo
197.121 115.666 li
183.811 107.966 li
0 0 0 1 cmyk
s
222.311 35.1451 mo
226.161 27.9952 li
243.65 36.9053 li
232.715 55.4141 li
0 0 0 1 cmyk
s
253.182 58.8267 mo
266.53 38.775 li
248.931 28.4351 li
243.65 36.9053 li
0 0 0 1 cmyk
s
202.07 107.085 mo
215.271 115.775 li
230.315 93.1758 li
0 0 0 1 cmyk
s
248.931 28.4351 mo
261.03 7.9751 li
0 0 0 1 cmyk
s
248.987 96.584 mo
234.96 115.886 li
221.21 106.646 li
0 0 0 1 cmyk
s
266.53 38.775 mo
272.03 30.525 li
289.081 41.4151 li
274.746 61.1397 li
0 0 0 1 cmyk
s
243.101 104.666 mo
256.3 115.666 li
310.2 43.6153 li
295.13 33.275 li
289.081 41.4151 li
0 0 0 1 cmyk
s
310.2 43.6153 mo
315.921 35.9151 li
331.65 46.1451 li
275 115.775 li
263.23 106.315 li
0 0 0 1 cmyk
s
284.021 104.666 mo
296.78 115.886 li
357.721 48.4551 li
340.891 34.9253 li
331.65 46.1451 li
0 0 0 1 cmyk
s
340.891 34.9253 mo
363.11 7.9751 li
0 0 0 1 cmyk
s
357.721 48.4551 mo
367.29 38.1153 li
381.7 51.0953 li
316.251 115.775 li
306.46 105.105 li
0 0 0 1 cmyk
s
329.341 102.795 mo
340.78 115.775 li
404.36 53.9551 li
391.601 41.525 li
381.7 51.0953 li
0 0 0 1 cmyk
s
404.36 53.9551 mo
416.57 41.9654 li
430.21 56.045 li
362.891 115.886 li
352.88 104.005 li
0 0 0 1 cmyk
s
377.741 102.686 mo
389.841 115.666 li
459.69 58.5752 li
445.501 42.8453 li
430.21 56.045 li
0 0 0 1 cmyk
s
445.501 42.8453 mo
475.223 16.6001 li
0 0 0 1 cmyk
s
459.69 58.5752 mo
476.19 45.4849 li
487.741 60.2252 li
417.23 115.666 li
406.671 102.025 li
0 0 0 1 cmyk
s
434.171 102.246 mo
445.61 115.666 li
510.95 62.7549 li
500.391 50.2154 li
487.741 60.2252 li
0 0 0 1 cmyk
s
464.751 100.156 mo
476.96 115.116 li
0 0 0 1 cmyk
s
512.601 90.3467 mo
511.501 88.7154 li
498.521 72.7652 li
0 0 0 1 cmyk
s
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (Michael Roman) (Cornell LEPP)
%%Title: (2230204-003.eps)
%%CreationDate: 2/16/04 2:17 PM
%AI9_DataStream
%Gb"07M38i;Os[gp&FY]m^N#4<?`FGU!_6pMeh#,gc);qkaPPKacPS6:Pp1".<Q1r[U0@Nfl^p6M5TEo3'fpM>'hi5:-Z1pAK#@-F
%g#DkrlMTZ,mGdt\T?iaoBiiSRULqe.`Ns4WI.>JL[[6'n39-+gUp@"p`8uiU#i^e-nPr;o<nCu.Qb0<9Mjs%=h<jV#H@L?aqtY((
%j7[6]VsR^bANTduh0skP_ecU8Spd5Bfj%l).-Wtbp)eI5MmI9odoX0;q<iWt@/bk*]t)ea2V0mSgV_7,P^lc;\_9:*;LMM%4q%.D
%X0_c\q<eDd]K?/QP((-a&+2<)I^qN[W2imMU8jQ0qR:t!47W-Jj@@Ids7Ml;gPah(c1Z*rIJ"\S:u_9e<pG(CHbU:TPstp#3W1pA
%mCq?3m17X4=\;+)&"h(EK`?Pqom6[V3KrQ^9$X'c'dfpH4eF2"`s',#YsN')(iIN"D.]4X("tg>F7pU(@rPcA0&Q-,LE005<SCU+
%f_?Lccq"NgeG*Yp5BEunhpT1+5$[H'pm`].m,I;LIJZbDk/G<-9\94)nFGT-1bVnoR;9/p^U`+fDZ5$+EKJS?J'gfq5@'oMp&W*W
%2u>1=W6G+Vs%@rFgRG[a"6&Y?rXP_!q952aVm#M@^YJgu"#AG*_:S."=0Je,-b&e*D$dac?<?cKH.&(J.U>EP4iSI/mq6bXWoH+%
%;GdWjLdaE%UWIaHkk+Pm`S6<OcZuT/7B4rm[dSE!hsAVuT79=<)ET"Xc]esTs,!0t=[!3Hqud0$j3>Pg_G@)/3W'unrPW?P-GH:>
%1gYsTmOAX=Hi<6ch;t-,m0*\o;gt/<e@m&a^05@a>HDjNQF+a42I$*(^]GtLYH%*,[J7LNnGdMHTiHg@Wktr>KjUlQIbeh%>B3l)
%<7^&u[7Fj\;H^Wb`%medBpo6?)YuhhVEq5Z5q79!s%'P&,1U^jSBE4-=Y>hKZb`i7NO?j@g#2VL7e0*.V7k:uWDS+5cM2`d(!lA6
%;P?n]+0!VbfMhST4i74iK-'!$oK/(dj@,^15JEg]p`Cg(3(_6U&cP;8nI?uDKK<[$V1,4,^[OJ9Cc6g_q*E28N+E]7PjlHKPb(P6
%V<u\hW?!ROEthQo+&\e^p`Cg($qd_b2jlD5,8L%kB37VlntLX/+5bF,R=G,f/I)FY,8L'1s()rL94V;(Iaf3S!%j9,'B`'C-_l]$
%12_):V!$0PZs;<2oh*>G^*H/F6Q5SL@O?DVgsU!6(&c&M81"%jrlLNu?Moj@k[!^0@Wl!<13-9F@!BQJLas(lcuQr:_1fBOige0$
%9C$-<V-Y#uZolW)m$k@&WFG6m]&]48j\K&4.oWZTk$5nq9%`X*i,;fdP,EO?=)1uBEL[[0$[,%Q:\]_#$&@M4:U;$23R%Y0'LreH
%dqH\.`qIDuV-M-A<69W7(TOFNT@WR+HC)CXQLF'Dreb@.#UI+,T6'Qd^!!&Bo%j1F[h!u[\bqWIj_qDcn*+-WMJ&uT5gm:BXk3,,
%]usd9rWta.gu3aN=8<oPaZK/kf?;la<n;(FF$KD:[FrVo^<O?ebeC:Q)JM.2igHh-PFggjBY<+-00FL2DR50R]J_:JBQG],CDBK>
%2S@Y)7lr/<ZRY9?Y'_^jiH$IXAat*u/+eT\25-!nV'Hh7:V'VG8?&Q4bDf`MX]s4h0fT$!o/hAuh#,8B\"IA*c_=.IS3%cFqMqh%
%bC5odT2SH*29kI3)UCS81]j/SRr?lBHS(iiVcmhaVmaicWfa<VcOMh]s2ORY6*'!m;\$jE;8)V9l1M^JT$O7ir]B606)`)(D2t5^
%.Gn"3>=`WM-#PYFbb#;5%APJL\)_NZRkT:c4(IkPN`YZi@p[a(&^B20,L,[H8\`Y>Wn5<RNKp3`)];k3=nt`?>_Z5d),$C&iFq*>
%T!aF@*fOeOs-U6YVM?b=POKM#I40Zu%JPZ_:S2K/l]fOi)$Z=lEG;77EK?(Ia;>+t3JPT1*8FoMkr6;2Ie,51^@Ct+bXsOS]^?'1
%Q3;8BH((;4?d_GNLOC_7,DcB[W:`[XfR%fW+?-Dg>*H;nbIh1,rQ*kjMlA$VRo_qIHHK&/]aJVra&O2XD7%Z+=[W-&F)7ChAh:@5
%jmVDu[bN7b9h-2$hkNVQ%]*NjnD,j[EPJ``_O.s^DWsN%I=J,KXcG7r:4r+;:"4ZsC0Fl#Yed4^^KHd=B+/;!f'=A=#G\?\_08fZ
%_m4`pb11I447C(9R'tm1:Re3OpW^[^0u*0?Q&XS_"kEtYhg"sU7oBAJDtlQZNqmtM*]m#ls!_r?j[ZD<reu!N8>'_16G0a?rPi?#
%Z"f(5GjnO46$NSJoY1,nrO1N'7>_\Er6[N_/KaH=6WB)VIg=HO)PE\(9&HD3S\F/@2DurQ[u;9-,EIPcf9r>N3K?r*mX+$1j.e35
%RX8EF)bhdQ,Hrd*4uPbG]X+%n^G@JHc7AJXE/qMH5;##;_pJ=n.5>>rMtAIk%BCu*n@Bu?A:/V]@qe\.WC9Lg1g8u3iL5'$+1dN)
%B.]+UV<PZ8_6meE'>K_^^Cj-=S`p&U)4QOJFVpaM#@rV.6doroH#uRhni99`Xd@<gX^*:=&Eb?3KDdNS8rr-q%m<*`p#u.g%?@Wi
%%.gd]ReTHYd1+6k23.?H81V:MNjI*)[>-/'U+N,$$n,LAGG;-\df<UH6ps(uM)ebmW.rM7TqmYjjTb#Y]d.E&^&.T+h"M9-60-/[
%*a6:.'HLAA]n7@nU8C^'F89@4@AN^#8a#)j#DX%^4I=B&:C;F);G)kQHD:6,YUUq>H3p^GjdZeGrc>Ok3i7K3Z/BgpReWDH$[fiR
%@,ZNb2;i/t#_F$HL9.&]PD%oj]B[$^q0/R_XPrb4CU$P3'lB%>@09U<ClfljjugFYPV:qb]&[FeG3roOHOBF*=Bi#]k>q7BIZ;pG
%j6tAB&hPK(CWR(XeCQ@;gLskRb7r+M[.Z@r8eo\=VI%Vbr\<l3qkJ2krFpE+$XMcH>g4"0!4mnK/E_r1;U_r":O+Ub4Z,b/::WS=
%B3ji/Tmf)XbcRe>)0ukBN4tfrR`.%2B1mIBC\i``p.FV"?S&h"TDCnB]&o7[S'jnjTc6B1oFU%,VaoX6-B9!.jmOt*R,<4pTMO:=
%ml;B"$Sa5>c4Hrc.@dZ4@EJ?BGhp8]bR*h39sCR6R)?#Xm]^4^4NUn'c<=0"%CHbL>k"\3)kGZ,Bs518)DJh"f@l@iB(FiWQn`ug
%L&5r+>+:KX\uh0fAMa%Y<FRn1PJ5N4=D-iG/o]bEa0)VDXO(>tgrOl"X`1fW)AVq*kNgOeeunH_"?hnc7IMp;1.RDKrKLAB2pIia
%:-l0oC\5=//:$mNF8dlMa"^@$VRRBl:7&%p$U-a0pXA#V)m&()6>f`p;qB_\X(9B.9pOj9H8D(X?]Pj`D2eSrRsF@[B_;DXl?clj
%q#c>iL,/4\LJMFKnTF2B_R2n2*(tL*h+]2c+SE6+In>Qh.p3riGnnYsRc>dYG'Fi%40C2<PiD+nI-])n8[n<6R(6qj48$2jH-/3h
%IpC:h\gp^^.][<5k^/c!P&9s?\AT$$H72?9CcbBB&GdDA1!0"t]TZstaHU3'SGOOO]!Z8E)Z.<rKAO1^TT)ULM'fi5R(j]7g[Is6
%-u\]3n!s9MEoR+SlSe?T-'BNe$Ld)ZH07#d1"O2(:OYSGI!VrVbH3^g&Xeb,O@?Mb-9GkIZR:ZXYfJJQo>Pj%oR)?Is6(>MW:%gH
%T!FsDp.bB4ep#d(2dW.dQ&!rI>BM1C*pWa'("U[_a=k7SV5Tf/%r2]*G:WN[rB=7@<h*R[E_Z!qTd4+7@n8Lr5OY!6hpEC+i>Y^0
%-hD0nlD$6HlhCq&.Xl<3^QOd/AeS6LYY*Gu4iqtF6?uu+9teP5lPm+RV!m#U4MS)!<V/;tmH\d1[8F215mHc2jQ!8(ID$aJkA(V,
%r!cNBiB*uf9,1IfC04\K+/P"p.Th%+7RoGonQ#.IpW'I6_SnChdlMPcd.=aKgL#?N$#UgH,g-*(57?&pNu[nlc5>+L>;-uJ2ddLk
%HPm&/YHgd(fcF:5fIeU5_]&,P>n(T9?ENVO("^S<+8*302oul?$$p?o7m@"V6rkEU%mWif)Z7m(:J)4DJBUrr`MYl[S@3NUrPS=%
%)d-Z?GXJ\&P%Hi%AaEnRDlj\D&c"2a3(V]rn[\PSIpP]&fWb1`BiN'9Z^jZkTc'sHn!Zd[jSP(-r+N\8F3V1tnaPn&K\=G8bVdkV
%$@/7W*kdI+QX>j_52kV.6M3C@a<p.o@:sV0I(#moo:J5(^.ph"/^Cae=`jIBi!)D-*ufQV*"OW&bR9lp=p"&:^gcj7Q2E5Y(sS@@
%I?^/:>cDa;MYoL1f].%*O$cs&%M3'ehib[JeO%_YYiXf<AWMo$k0hNrg55NTFrU?W"W=jZXbLmBNXV@![OTWXDYXB<f>mKGL\M]Z
%&gTo%/>^tV38h1g@?>$ILr=ia62!+^'0]Qu"ubC0aQhcuSo]IUnYMJ<B#OQiJc=RBnD'(i%B8g1]#DZ(]O?)PQoterXM:N8V2sd`
%ModT@?nXuemR_$>BF@:l8!q_>RW&!+4UG#WaDO-*,B\^F3E!>d9^l6S8E<9RiY\8B?,9-FS+ThU,!h8,Xs%"Ib:DX]h6grOLS[r/
%E/n#ck_T*\()'jU'iV$@N&RjE)_F]ggYY@2=4CD-T/'l]'(L=aQ8St)nMkTN>:$Pup)!K?d!ANrhFK0m*6)`P-QKTW0RX5:K,<G_
%:Dn.[NHbm8\tXi=JFiio'k32M0YLn3NZg_fH*/)dRs?"Fq`GIp6LR]iTA7u9<7(5E+(.0]bX90or6f9Kp0d5#XTkgOr0"#*d?e1g
%>$DBTLir"mop,"S-_udOKDtboAgsHOE,1nr%\0bZ-2^@A+%rMjci[I*lW3KE\ZUAa;a4IBMS(3:hF==fijl*^$iLUgbP26E5r7YW
%Ej0+J$^Cu3rD@T.[/E.PK.58Qp(ud)G9-2$CK6]OC'%&`+C1J%?:J0qFt6sen2TE;XlTmnoMafdVChQ)DuhJ_ad!XS!BULQF]GKB
%G_UVYN,8J'8V'[)NV&hpV*^5,8leVJFs*\<I`CgtmBFGH4h$AW9A[uLjcWe2n$KKjq``RbO(7So3:`7fQ)Rdh%f@SW>=3Q=VRF"e
%Ln>MR(GAkpA.4*uU_0UEXg-edJe(Wr^U1_m.d>;]n-&62RcV1m.0YJslDaDPoU@P'BV)4pC(n@o#'>N6*oK`$jWF(HfHQKhL'0RS
%5#SS=1@&o1Skb]`LJ>>/S*2Ya;F>kb('\+?EV,dk82tYJkj\:Lbe[_U$d,B.GtjM".%b@>L3+NG$tp8pQ#^$]jEK;RQo`5o`4?N;
%bN9W^HJBuAWs.fb\-pj"C3QUWN[4&(T'PJ^e946\l/U9upYqT;"eo)2(:!2@.g5P?\Sh:$MFW`ShE<h;NuP49Ep;ml#AbIS]WL/V
%kT?9MN1.s"dAPo4"$RKI_)!l3eq;KCn[ZK7#d"Yq)'i:=OV&%+1!\efGJ0NQ:/ET`C,jFs40G+U;b?0:d/[!kn@]:'ZGlU>oj$*A
%a0`<^&g^D"B-0tmnBGpu\<W_krHDpUo%c#*&F'i((3i*C8a;st37NfR<):Ela6/P4jXXYI%\JLEoNKBtDNZVRO@V6R9%t;;5U@h\
%VUF&0+dMN4QWY9ROu#VbT^`NP5CB1&H1D#A;sl,b&Y>n=R`\(@oQ85tYq0,))5X9M9q/a$\`8$J]O!>;@4HdiSMmV2?$-+Z7@M5H
%Ej,!>D*YKS.rKTR>eb26k'R57W1."&1sZ]iH"Rr"'ul>=hOpFd3.2NF#lSNVYW'3]RD&=q7J>ORn*^L,S3=oZr:89B[(JK+=`#eb
%,l#+bH6R`q4kWQV'a#f/Hf")T*TNok7=Gh?Zfg9g:/Tj9#qr_M[u0\bNhp:T#!;Md>H-ZtEG4rG)8fhC4(AZ%gglgl7_DtNXVAk3
%8"LCC8AAAdlJ(n^o=XOFX5V9J\WD*#P>#76<mI2Rmmu9sC>q5S/q"tN/\45pP-C7_P<>@N).t?q'`)qn8mKLfNOb*q`QBC,[m%2X
%[Kp3Y6*KFA4H-h1@h\5l[]S;;IL>c<P.%F)bD?fOelpf=,NE[2kWd=TE:t>C/Y85"?K7sh@2%Z#QG&iHB@#.1k6T0TT9e)qLp(q?
%K/L?P\_^].Q/C<Ar6*:>iU2-af:m"Ts6K+LYe.TYHFr(Z)LM>SB)?"l\50$oo8DE6rGm6G^S.8qQY3r%MuA*O]&'%7*Hn>f*A7'K
%]@3rnZJtN&D2t_DflCf)gTug-Zb+ELp:J)1DGqIq^ZE>Y@c9Do=e+n*lRpAlCU7><nJ@AN,"m")VRb^GMplH5HS&s8ZaA>$g1tEF
%SKtn4Uj"8%EI-664l<u%]=U'dVZuR4Ve7jCVmhH;boXR.h45^bf]em;rI/rM70GP!li"Fob&Ou*3e+K6;7b`-E)bQel.Pb,+)`dg
%^,qi+DRS`?bO*RKVp^=.\s'2\_ti`4e+rk4leDC3p0H'thXBoN0/'Kr;PNscj6l4)nu`KU#3k.Ep!*;V4"BOTC5:-%gY9'H4hei;
%>CqXas6FQHMb]jNs)<+lqqKeQHc[?9].VC;Hcj^tqJLdWP<3U#gH1khh<"<<^\dG\^<&q4pA9dBkkXWCmFgoL/sA"#a;3X`Vq8_H
%X)i%(l0a_l(m/Ng\^:+?b2dII0#7(:%i7KmG0nqts0q^NG;i`odIl>?27JfO9&"7_`l/[jhd''6"+!egVsgUVlZ40ScZNE(Dmm-e
%[Xn@1OriIchq\p&'W:O27G$5U\R<FgD;8<LjpQ`iOe_4YD5&[/dFXQFl`@bOn#n%VT-_IKo4%\M5Fl;]DJq1'ZeR;JQeShci;:bo
%P&8Ni6-,4T'j[?D]=WC$]t(c1Dsn1C%^3'Zhk-KW.:;U[bouZ%^V##<H[!$tI.e<R=E'cl-<'62ZYP5[r-\4LNTcbKG5UZ?!hZ=m
%'):qGs,qtip;LKQYAWcOYC:l6/,lQM$;5W@>]iY+Z2:`:m@M&Edu19qBIOpMbSD&,cO#Ckm^AKZHmt:]=D,"d%i="!q8IR8SPh[)
%3Gda?qjZpC]/-/_(KBApoSe\%c0<iH]=6NtTc.uEM]QYGVAaZiI8:a[(0],\e(&>cfZpk("/=3FqtogHm;Afe&rH@9]!#K?GkpKJ
%s8#^O4$>MXKWf)\?dO0C/7A"uqkBK1Y-O]"LaLK5I6N#'Yr67p0`0&*Mo4tHUA(5$e[*4TnVf[H`-U"YM&)mB1rQBL`bs"thGc3-
%DFbLEYLfiJEkPT$f?N$Qh:e$Z>d#Xp:=`6.f;mG:\QZ)sX(LH$iluXX<qWIrl'2;\?`o`rj`7n6cBlf(0AY&/c*CYV9>+:tinfUd
%@^T;j(5r!_=nm\TfS*JXMe\q%C/GbBafO[+q/X3:ce1YIk*G$AOk`!!EtUR'FgGhKc(^Ub:#d2E=AkRPVJ:4J)A8A6g9:G&08SjO
%hA>$o9Cd5MK"(<HPJOoQa"->UE=fdb1Tkm9kuc)j]O9?7AX@RKkI.YP3btk&[B6O=b*Ib7OP[2s9=&$0D/YrL`gE3s\B9nP;6Oc`
%"7&B=Y8\m4[B3//f2\q]ZE,t7\lr+WC/N6VVXd1;.U/=@Y,Y)qW[d[reY]0LkdbSUX2mU`e!29Q:R>gker#-)[8:qp&10JB'*cHR
%V3Oqi;:7ju1`,8JU]E!Fc_W4m@3q1E,/2`[0?VtSf8CTb$)!h<B*8D!Ab#,0#$K^s9"q^J[bp>Y`CfW^(2Ce-E<Q4bXk#!haMn,g
%pt>J3UF/baX@n3`1r4iP1tCo(1T+R'U"F'GJdTQ.l*2348mLa%6q!e_aY1NTq)T?mk*ne2BVcQZ.Rl7`2F9FE01Q;(Va521TXH-,
%>S2jr(Rl][+JC>-RL;UCWaK'97U&:M,5e<m&uNt]j(VNOJ/56g9rih!J5ukb=*.u5+)0tUeg2oDMA?mI_P;_6(C]/R[+*\2Xh6Lt
%Ll,90X@ZT\oI,1\VP:Wu6U;Agd<*s9GViQl?r%G!V[6_Y`31UQ_UiK[NZ5hF7p+1N[Oe@9V!(`K-"2r`N2d2jCdBK3$.\0kE_Aa4
%'ie3G.amc#]N6YXW$bihpb)no=+nEUC-sRLK[UZk]eb?'Nj-45l,A79In<#3i<Eb$US]>H%CX=?Zuf>\6`ULo-p=]=Q/06iiSZi4
%ng1Eeg-b+2dR)g;U95D5cmndC(5*<R%%<rAH(O^Ec*="rXa*ATT#:6,jDbNZ(eNJ:akN7Ugks3Y:?k+.$kp48IpUR);$1JICQ&P$
%Vfb;SN61cMrCkXqS:R'P$&:&FZ'%ooB\4HQ&e10O"C<jSZIB=[V^9hT,"WM$b>ghkp=+0.1hViIS@"O4KVP,1MC)d6<*HY^Us=c%
%[=CgSkXS@*J"p'Kc/5&R&d/<t!lP/9+qfc(-H\Ru(4o?<5Lk%$p/LEXLF6Q(ALms*dSg]4!ZciR$V!a],nMl,VBBM>c\S5#79>H9
%&o3V+ZiHEcOE@T`SHk@cd(E)hSQDNV$gtUfNX#noDN<,cC@HnZo/JHP!&"n$!.I0QJJa!C">C!f$Zk/e!G_[V&GArDmM\D#0U!V;
%;$9Y!jO:p&((E?L@%tInKPLkN:`+&@G&RuN*t)D;`'[p[!u_ldKi\Lc_VBh?M/X0u']CP"/&GH)>D0ToIfY=eOTUqQ(Q:Lb28X/`
%PeqBmjeP1B^_IbiN73lls"q/j%/K`qA*_*qYQ$Gf?4?Z+rG8%F.F@!<Kj+u3$1XHUYn1FC7<702a<8ToJgk`4-FZr7&7t>P&8&nZ
%gP%HlEJ?=b"<'rH7!];NB1#<r0t(.?>!Q^nA*6EAC1o"31o*b_fJO`m/nq7A)Fq1RRK/90VDK;&6>pfc%9VrPL8fi895$b8BP9"I
%SVP/s4FP&AIml.'I&^CRjeOULiNJfbPsk96<]\1=/rdmj9dSX)hK3,3q<.lNg*ofK&h1eN\@DV9:nok,R-l=o2mq_f.XXRSVasc?
%0!;qg1rS,JFN+@s$!(P4._(B,'iSgfmpeG?CEMFt9mV]pbM\3p>km316;:i,WIhSBJsf+&=`h@e/*ODo[P6bo!XFTf-p@q]T8(nA
%>Q0n.+^tL/ZM[k7T9^^%/5k&\HII;"SCb'F=,%fa1Cn+@p-,b5aC*WYfl1@CH?##J"/@G/S2TqA&I?Q&&E^n:KF"Aec.#C^65>:g
%fSh8*oOu'=aXW+%AKXEr)4D*\+[W5q#RLg;UP)_P)DmL3BL%)5INn#Z$0_bL#=QV>6t\,?-]oAl3/5P7O;]9!OM3Y1Ul[EKi]<A2
%Q=jJkoFTD9'T8NXGnd?)LsiOBAV7B!Oj-Jt?*b"lO8MR3P;tkSMEP_c9KF=P/6N1m^p0m_8r)WQl[gu,q.j)DL9,)LHjE+?9Ol0Q
%G/L?+Z=U?$?XfGN7TN1+[NIcJ@EiQ?o%V6*CZ`,AoD&j%gh"ZL)^`suh+onq0!SYn]#B3c!ZrO1,bCJUd[3Uf!F`HNS7a"EB"o!'
%$kS=N+EQ\N5`LY4hC.n@euD1(A]`9)fNY]CVh0pK1uoiO/%V!nKA6]+=Nhu,^\'b9lKA<bE*:7dp+/\*q8h$D4MKJC_;b`\*B[s'
%eFF=D6dR[%:J\8+g1UEWW7ZDp$jN^2\*?-"hQuE0"fZ(hViaJ+]/3K,/7O+p<d>2?F5*-`W$`AC=nT4tLPq.MX^&]f'eN_-ejU+.
%?-1k:%:7HCQ&K%V]Sg1lat6uBp6Ajs3cadV;Jp(-,-Bdp\3+L2]2rHRRCRQEBR\SPQ:oKA0sR-Z9J510VSS4D+3T]Qr51<$&ZKs!
%lHM)'P@/@F_d#Vrimu=YW`I]19ZF=IeZd7:V;B:6f"_c]F@>uUg^[p[71b'G(`\s*Yb;fD$]$X0fMTW!@$HKk'mjOe?quWS'oeDr
%$neAZ4ANNrga_ip7IZsPGN<;#PRA7lPH^R8b:OeDS4jM5<.UYJ7fuQYXb@4kIoVFEfJ$tc8_nkENZ(AM?QG;k+elkNL$E,7X7@T#
%.Q<IO-IS\`7@Kh_Wi/gtMbLD#e_70(>6`"0RO+Q!7Opr-enL&V;TgUYT!"U8'ck>J?^=N`(mbBj<l>1I3[qHm&07-/#kOrA$3F[d
%'Z!%&"M@--^lsG,\p`3D;=I)<0FZ\ePJgm"+.%ELCu7oe:3qfKgmOa&p8#Ik2u-\NKHg7loDuWnX3mig3!9kC/,EKs4b;4?Pp37s
%+.)b+R85BZ2A>pJ@UHs;jbbY5Q7^5ggQTUB*%f9iB<C0]8Z#u8^LcWWL2`&IZXEYb/BES!NFUNA)_tOC;Ju)VW'TVQI+GDgfmqL]
%k%*sAk+kX.FlJHa@;AXCK4Kk^&(<Fu.=RYEn0:hfa=AIXXGS.d,\Gs5M$P*!:.B]M4Y*@QbVuAN@O,U?arM4<H0h]$c1*?Bd.:i'
%qmD@_O$OZ'5t411UWRH?@9d>RG]\fs5k<.Z5k,N87;@[/Z(FnQ8WjWX84=B<.N?_oW2:ThpuF27=/Kb%^7tQcO:Z\n_`D.XBAPgH
%qtTl)m:4nk[#\Hq_uI4$R<`Rq<;VpEkm376lj6Tp"=%LW/@&pFH(*UMHOoY>,)?QrfYM&eTDJ<r-'FD*Y0e]NKj:TcbFq8ULsr<F
%d9BTh=HZ5C:a>,"Ve9R.;lM9P<!Tj^Mr3/LL"kN\)IL@+KT#khRoMAIl-WYDL>&Sjg-roDWLIkSS8Ma468MOT:WW,Q;qBdLqu,s3
%ff-P7ffoW"'l7#_i/TOm*do(bC#qgdr:*4[,n6J/oAcobS?FnMgfUiA:XAf7A/;@t+_)N5mr2;od4+/U:-GI-VI8FjSSt$?p*q.6
%.dmh5;ri9[UA=I=ftOm2S/?9`0A#jmXpi6R7(\A;%*=JPl#RNJ0RU50K6P:)lu_$`YSBsdkBOdf60.S\LumH`No[qD=QbCB3J["4
%Fc`q$^?0-Bfg23EnC0aQa<)4/M"Jp/2EX2m:S-beEIp=Cn>"H2oYcfGSpKHPm6afSoV@d$fB&`"&mp@pbd&n;'Ue<SUq\Am<4XEO
%EViRE'.T_"kT7@^d,#Gjfe_re?U`^8HjR6l^+&Fs4t,p1q<fK!ihmSI?Jp59a<s-iF@?WHSE-k`JW28gMO?stKnG;,7Gi<^h,E]%
%\1FrA$^L*cUeOhA6JW@/k!e&gD+8\#d[l0=FtM:uAuTU3\fquB_uQ%j=MtZsm[hCM)JjCmJ^&BjFAI*TRVU>UK@X3/V)>9SU9No`
%=*:X:\eH0M2)EWT%9#%08f'c6V.hU%WsKJrVk"8P9l$'Z5AoPe,EI[WOZodkn5LWn*dP'+UA\%$TDm\RAiIl)cMh6,\p;ra6Hl(\
%*bB9I[2@Pgr.s-QT+K]i!2EBBItkZm<QA5j5(di)8sPp+E`;!1=4<jf-3eZ"B?@nFMIn'"Yuk$<?F*TH6o#$YdIdY%(kaW"@M$Ig
%ql=0<$j%9a0-;Gmbu3.#H\iqe6/^1"K+!8H9VE$&+CN<g<^R#+YY54WC)LQ]gp)Xbm@r.8qqaK2r]Nd,He-$>A>pBa^^)F,=-\()
%X>:G>$=PQ.kR!PN_;6@B@KE`=gr8Fk)l+0nr88HV:i\Rm^FQZ@Nbf[E7>]lU;79EQgIN5T7a%BfPb.;McKABK:D']mR07(^p9SGT
%R6S2I($);uME3(C%9ko-B-]N,DO]o`H,<gMA&EWNQD[qb-sd"10ghK'*)g9c+.0BORU,RnU@Mm=E@XL>QauF=,?+.Td&f*fC]q`E
%T=F^'/AeP#/I3nci7+Pm2g\rs8fKq@\I%A0rh]kjj3#N8kAX^YN>l,)r!$omLVYSLN3em<m($N1"b50H#;3(8,!aA\OP@Y:_$17$
%ULL-#bF@qZR*%qcKDTX7pO:JAdU5ItNBE[,.rd.!]QYdl`/E\Q/9<^==uDN!0g_E.1qVIca4ug48`i0[P2rs[akTJ!8C9e\U3.nf
%"K.D?j.KkgLjj5!,DWdq38Uu[fH2ho-2Q\b=JWX"i/SY&&`^T"B@j$BhCWed)0"N;7;'Z<lTm?aJfJ9Cg#s74r%5.\5Q!-TrmkXU
%VUqCg2,u4@kX33p7i]bP7dpCR0d7;Q'+B5^iOEB#ENaV3gm.9*P@!cM;=U$mEaUUQ#4(H$U%+N.W,mNp\%XWfnIJ(Se=]r=-s9d_
%JV;ZT`g<h!#(+8Y)]uP%s&?n5Z^Q(Q1`Of+.gre[D-3Z<nX_]+Ba`eMDo1A?A'8'D&>$Fc[nbnu/\GJ<>OEB#qhF:jiP@`@HAJo^
%6?3WU?,VXU@Bq7R*g7plH*W\`MdX7,46s$#Gj[M^H]I:'j)LhWo,lRq&REJqIXBji-edD2?4lYYZ>-U869*Zd>d,I@fWNA,F3%sN
%19UTCKUA$i9c3=VIjgfEkA*+Y4?aG1iZ!(2%3%IcYi&Q`N+H@+=(C.+-t`c[_B5!;.9e@\CbMsJn?,C]6j;6::gi1Ab%/PRqF:UN
%'g8ms[jH3?NPYn.apnKm@t;CI*pi(;HCig84,3@nLd2!aH"K#(>0XZ;o>/fSV?FH?SCW)($U4BnjL4Vi.IS>`kShS7UB%adfZ:Z?
%o'?q'i+-2<Y-2UX006"R<-qqam(A3f*tk4n`5FCI47ouL\e+$Wautba*+;fpFuAFR]^-=PMN7p1IHm1+V<`$*#V=3/*oq1aMNP('
%*D;sG/'S$>r4NqUoL$V^cMU34"u`6XMlSP2Xa2S9r\8+rGU2TP:GKjh++2)8NOT^IYL7DT@iqhS3*KtpjOn&(L-_.RG[c6uNEB75
%H+\:rEJd*QGYR.:MF-iX:#U)L6Lf:piGj`AnT[deEJd*QGYMUFNZF/XaaXg;pt57b6ot=hcd,kSKPU*tM(spi"AJEkP?JQMHVO53
%e,n8#V\k#7g@I$&Ngs!<:N?E\]u9_1JI`eBa.Mcpq)kbEjhSaVJ&Td!3qi2.-c[6(fEnAkfQ6pJg>S0Orh5712dqh/&U'^P`3*<g
%g^Lg?KtYq\_O?-47CKR4"0Q*fA=4<h6XRcfKFNJ=-!OC15N"`LH\u3Yh([RadfIXK8,Z)h8Js_[%kba^-9JO;b:>QqRLfGYLmBQI
%SUd'.M3!1F(_-Pm8-f4(\B8M:a4AffLB/ejO9`fAejWs[MOgS<&NBp[WZ1XU!E\dW'=-c)$oMs2bS`u14<YPAf@oej+0=+O=;YmW
%k-UuN]`okD1Q0HGgg7T'\/rfM,=6Pf(DiJOdretlI'L7H?oF41F)u8_daS5qU<I(MA@8tL2ETp.eM["F&MD5mm.F,RDHGD;=Qk+a
%hp6KC4mm7>2g5_u@[Z>Z.(e(#E@%Ndk_s7TiFHS=#TR9>rP,$0ZF*La.R(h>lnQ4b`T*`P4RU^Hnb?cWNsg\@4?a\/,D+nPTbnca
%/DC82CUR9FGe6ETDU$pWR%@g/a:U&RT#fCm>BT+:k*c_uX)MZ[_$5pA7+8E?,9>:8fdU*bH7?\DJk>^*9d$KUE)Y&2`T*GZO8)hK
%IhR4F/&h\9qc7_]C_QU'WaN29E\HS6I&Hna.8S-V?Zfs`4_e3gE9?3D0=iP0qWIjtG%K9F2u#SFH/rdNbBeNiW5UpS`Zc^N2j*9u
%BsVaJS74:!L7@/9]>N!$c/&%U^>k<)N[e\.SFiaSL[K8D+<=C:'\jTl;L>ul*T%[td]&pKUc!\d:;UnBFkg7:YC[3Z=cCSBp;Y\;
%fW[:?%UlBqW#IlcC0J@5+=Ia^ji4emdJH9>MRi22B$ZMq8*CQ2%mkXkGJZ7+)%@7uP.bYo"oEZaNn:TTnbH:.e/k,f[Xm(f?#\32
%ld8D]`(_#6`FM8MekF@7ClQ[`p-`CfPG1<*`UIpG\OZ&!5@\in#5%F$5.XHQ5r&>'PkY(TIVE*b0k9;)?dj;_SS->qQCV[=H.GE>
%jE8d-FepY>H$&Lh:BM?j,]!CHc=8qslTF!@nXhdZ1uU-)H5<&!S9gFKb>6uq^Y])o4FOF4ILBENoY(+u/TA[-p?H]2@)N?.`r9`O
%G(98A4YefU0?&R@d>)?\=[hMs7DVI@A.n9V:94]o:t)!]:%jcE:+O=hpMp:0W,F^`A4EuSqi;I$>RcQabD]1W\\=KHNk%N"FN7ia
%JNVZ?7m-T=D`cC$DH1uJq\o&<*nj\BNuSmMp"Ft7gQ1#E&$I-%^%+tjSi454L*?Q-/n6*P%HZX/&XFEYP)Ei-p;TS,,.R)0LWcs,
%.;;T4AOftQOd8aeP@?)GaiL6_'/W&ebNp3kd;oIsK\&>>h?D[D>'K>c%6`N7`o@;`qaZVBkIB!?ip;c3Dau:k;S-0^C`$Ag,hbpH
%&pU8eJFb]KP>,5R.R-PHPDh_)$`B:/ms,u,TuiRPs8I@-lJLW!-PK`(F"9`-M?1",*PXh]PNj*8MUo;%ln`Y9aG+*;2.KP77Xg6"
%T47Gj<B)8H0qdU#E!uja6U;U0[[N8N8k:AL>.TB@MXa8I8/-p\eqT!<6/YEU.]R!0b\WAN(<E@kJLkgTj?4:"`DI"RZp+a&A<BQI
%*W'?u!nk%I-4AnMr`HNSaORg!0kV%"RW=H+A3/^R:Co!:_G/pT5;_6kbk2tqIHJm40ZI`QbMnqrF<iFZ=%e>%P3U6)oCLm)^Be0<
%nVQG#e$7r?AJdoa)<8S@_=![jlZ?LCY4p?BhR62SY'%_X+oH-iK$_MMJTF6m#VnReN_=Nq3c/-A=\9p&=qgr$U)+.fK`_\`_)aX=
%nbo*#a*ee%,T^u>I]0PIJbQ3!Nscq9qhi<j$9GoY'aj:CESO@ZBH_X-0`X_o>G0H`H5J*LVt^f$i.^"N&"?u#:U0n^i:)Ep&$%/>
%5Cfp9K(0p`:Q,5q!lMOXE*QLY2scFg<9!Q?++hk$63tU@AAlkEb!Q&U>l=WtUH9GJ@Da65ntQBJ6n_mD-T$I`Gk'B8F0Vp<Ys@8D
%ccX9.)J;d1NR&'<UI4@cO)3ZRP0`<bae,)'C?4CcPeu$hN2\_)]NI6J!L/b[2Qui7nk7fmQuk@i)d@0dF.?:(eUk#%3(h$?lFbgu
%B9g@S4:uRT,`pSNiUDVue+j\AS2M>uOmq^XetYr@`cT+^-hem7b-?nlLYZi4>AS4A.C.9FN2tk/j59Oir4]&c);Xb?/i(!chVdMl
%=*Q_KJ%b`mg@%f\A:M>)g0X3mB5[lcVMLt+!.Vb@mW[*&N3rOM=4'S^ak8o&^:r:[:<%59QgLBkouIY"Pu'A#(Yr(ta*&=BWKO0r
%P#>WZFR#Q?IW'du1D;mXPrW;$H).8[ZmFH,N_/9.AG:=Tnd?</%*5q[d:$B2I`,^2]5m>i]st5__$Xd_pGm+RNJ"?kO$,Pc(]Ad1
%&c]\0i&]ma!4.[]A$Kn%,DR5$KB9Ae#Z]:,H0iPVC%$]<G[E(M[eP.)^EPJVa2dfR,:4YKDGBfrgin1e<70oYinr'(JFBI?gO6Q$
%rT4N5aF_I#E5mWj`.nF6ILII8LD:U9?6Ao0AmB`]"`jQ9l[*e<++8%C'I+n!3-E"9]L(eG_S[`9mQ[Jn3][tMk7d8JR?1/ijAqXp
%ol*&mc!tm>:)bBfEti@60r_k<_*$1KHk2@>@9XSRlo[;o8')P[^Nr;^kl/qm0=opn^GE4>+*.qFdI2)bY6^U\/rR$B9Qt,M0c4!)
%="rIkQ#k2pUDNIG,.i@oGEfmJ%F"XHC2[2leHH=MpRIZ6lr6qNiMU]ibk"-*(%]dk:lJHG*1EMThc41l`LuXqK4=)ZfQHLEQe`M%
%#K9*+Ms&#\R4GQ^I3ki]][c#Q3aC+k2U"[dneTcbE:@a)LOD01l00pA<dlE#IRPMVB+a9Ih<qob_lGpSX)bOAR+CV1SNP,bJ)CgY
%1rHJ;LEqX]4*HHb7rSg/fW$&M2*kR&YcLge1L75B*tJN9<pjP%9@iB>Y+'U;<BJeW`r\!M"mbU9+/sVY]Eq(19pjo"LBH#Q^tpf<
%\C'0?f/^etDRl81re>[e-f";=47@4b-Uk=IA;>Z/?aC-pm]u@(2r.JH\%UU1000>cd_VM;?r@DujK]=gRM>p]MmNanB`kKE#[rgp
%lqCNaPL^ncOj5-iNF.,"jaN)=("F#I.$'?*099fA-q0)(P[=gJ7`.onM@.':/k.9>ZT+=$$>(%S1XfQt/4(>gClUT^4jcK/i!qV`
%C?TJ^NeVB7Z\P>=);OjtgZX%,[33!oA?H';$UG3M=(U4iXd;;8\Hh3.,bmQV:!BZr-P.Ll24\DX*$qWCBh3+Nh4'/j>F@N\8V=q9
%0LcItU3;0RhS68O4cRn_L\omhmJhJGQ0?t`S@cg:?1HRXHgK5sPFh1?J+@]"E5p>ZPFRZ=Rug>?Ze=Bma3.Dg2Zu&+4b<-+[*LLS
%<pc+,nW8-oM[l:M:1K]e<d*"jG)K;Mbk+Dh>d/;bD^=u6?Gc?YgLlX3l12=]-4MlS'_)sVf"jI_Vg1,mjA;.Lf9C0GC59)#pOh4>
%96g=)m?8XP8lF+^H^<LZa18WMj++7Iff80QJ9'[ne],s7ohb+)<3D;8l0mIqrq*ktl(A0(rRLSkMjoX*_o:0\cT]NOe,5!\X7m^$
%Toi^E2i!`T+8<D%iq-T]Y(*t@0=/u_kC6e)^>%N3&-)1Am.@@Gj_jd+EVf7cP-j#3UmukXk5@&Ko4n!dQ2oeV&L?i&cAV&4O7_O@
%kehl_k_E;(qpXo8s&%(e$2X$J"da48SA*WR;eQ,4bYG,LoZk^Xrh[Uuf]*e&rU+XWEEcb^kr%`$?b`9k[tgI?iSs_!5<e%u^AWC5
%JA4(=2SC]6s6Dn7r2#W21j@noYP6A0s&@;C7'D*8=.AHm)9JdN!/0ef-I;eObZH`\2hdhd?gP77hp;:1p6Tt>LYX=\c)G?6\!2$?
%./IYS%U;TV>"ZrKi]JTKYPN"pg9LpK''TWYC"O"Bd4E2CA?B>H6bU!,G[S#q@7J:(XtGWJPA_@l=,:*Ak%&%Lr$mE1Z$(fDf"t-t
%d[.2hYgUF+Alt-m#Su1!PV=<K^dtY>`B(7A=gfU;mGW&Ys2G8?(9a3&6/`Ut*/ed/g#/76kf>1As()U8Whg;".#U[Qij!M%[QL,m
%jb&3co5Xuu?<g``s(T!AmF0`1Dg&an#>f=q#Ic3W\IPsr?C^1o\-:"1F!i"<9Ijg2ciJR484Oq[R)<ENip`cg#%JW+]9>PCa[ZpU
%PZ7s#JN6D8%*&(iSn+gZrW'E+'*^joKZ(.R0IYLoHGkG&s5dOdd\qgf)@PQP'c9MuVEZhJUdY:lGskP?_@kto[Cr8RS]2ZDVs9<I
%rm)-.daQ/si8-3KlFlD*/5s>L$,\8&P]\V_ol-cj1;G&G*J+s*_'BO]1ltoJ4WH(VPapG9lKjPkEO0pL=$DKn*_D(`-):#ldb#V'
%mrUH=UJS4;2BnJ$>Y)OdUYQE9)t>B6.iD1)as*m.1SF<0&U:rQ@@td<&51@?+NaAN:R`hH&5&<f)oT9Z1tp%U6cSbC86%Oi+!RW)
%q,R2=\mo2oZ[j.D^G)mWd.iD@;A.uVbi3MqCH2ibD<:Y"6B[bp.2pPiE!bcC-!]"JjsL6nTVu:L7_@hpXrV%iqUWe*1diSEe"KXM
%D%lK_`7Nu)<Kr`-oq409j]W/N*?lFnY&lUg6\@0]j/!KA[<)X%Xq:Cu9!ZSeD4Hl7S3cU0_(8keH30F0]Hd\$_V*Z93<Y?2J=(:S
%dnBod+ik?YAO*_O9VP/fKtGG.&4GSGGgs,p;O-a]AJ-iB3Kj`RfPA,;+`=QLfYTha(o+0)&?Eu;_l=E^O]FddQ_kgtZXJBrgp>D>
%m4.g8qI;Y=U54;M"Ep5E_dih9MW2V>N\Y]"K.XP]qm/((G/s%(]h`Mbbn?=dP;/fQ;SqWU63ff7Z\:P-)P,bAb[]FgWu%:"/>_H#
%S^FQkim?Y[m>1TmM+PMF76P$-*=X?#UYIJ3+'0*J\K#Y"EB_QudOr_5dIsu&ZG.f/3nM@/TMj$h.`5Y)6\C#TJ(<d]jL6n]#/Bj+
%D.c^8%P,));*/=!a6Xg]Qh[]I@iu0YKLh%"h*]>"2lVb<0VGYY,QA3(1,*$;RAii9nTMp^Q89(5/A.Vb$2k75G8AhLTC6rY=kZa[
%^C5%CplNK5#m>"Ec%,J1a'$oF0NXMnWi-^;iD`XP!r!T%hTi^Z;JUKt>!ZK%=;ca-OX;Zg4'81$ZF%"NqGP7hTZ@?89VS!ok7Veu
%H5JLk%8_0oVC:CaR8/ppg$WMW77&i!.S+tRooE9%O5<^*236-<HHr4Fdk?$8KM[QA'NoRK$F,M2jIi;d,WVeZ'0=Jc=b@<'K*3I`
%;p-pR4e']8.WjU$,#)jh>T(O0&'8%@<`9Wf3ce0?;J_"2<0?@QMeUc$gu\n.mZ(5(pe9>pE>$q\S(;=r?1LMlHI[UL_;6,$8X=[W
%AndL@lR6;-;0!ihWN^msp#)fK8_?YQeDW.`8HV+m6kTdD39X;Y+mQ:u7p6\?'XC@u]F7<gN#<_rOW;M0Tm)&cL+s.MTHtkX@3eDm
%&X)Qi9(&?<\3MWW35T'lct773CbUXM:aMEq3ga/_>'4]fMG,ZPe7MZ>b,D*Y@'g/p80L,2\XH*%T<WKm/'pm?RCfsV[*f5@b!sR5
%$][P(ART`o09E_*C%HbmdT)Y<mj^W53)n;f(GK*fL&k)la6CR;26]S4qG[)#^:^s=j;S@,q`Q>%Qq[rgb"j[?]R4e67kt#qJ>o1_
%nB$C]f.ZiAm.bdQp\p)On#hT3oCM9,]@i)oNPNfhf2qV'h/%(PGPc:OlM?sJIQ'Rf8P6g[2hsNg]ld0*j5m1j5-!t9BAC5+P.Nrd
%V2s]I[ta!f^V>#?Z[MlAibY]bOl+p)Nods`_TdOVZV+m!fCo1B_-eh)\@kRGO?q=XLG4<,C;7AA^MSmkYGk6'?@7REq[90AEd`"s
%9eA`a=!)V_lh=O0>KHO'I.iooc22"iU35@!>b0=H^:`J8TK!D4Qg_-H./1o/g\1[Y;Vna!_BN>mTA<f@Xq%N"@9Yj@I2]lH53Hi#
%B@o9"hY\eZ^\uWJ?X9;mpri:/ml[EEA9Rh?5_ZtD4oa9ure_>9LAu5"m$$,#P]Zit%pRTrOJ&#4IR/+"IQm])55]^f^U`$X[GZ(L
%fUc$ZIsM4Ha#2emp?#i]B"r]'45BfN)Y'l;iKkO<InXS%hHfKoDm2+lkm6!T$&K/K>eIU/TV8"K:S/-oo(hYg)rk$5^[T0*\kCip
%,L=9PI/XXX\$+-GD@b?cs*,f/en4m(:.+BcE'!cLcTaOpH\@0`^X^W'&"c#i*Bt/EW:,DB?h&Y/1feON9@3.m[l79308@QP^HVOD
%GQ)R]Y-+sgNP_mO\(LPL'+:Bs$\$9WjcP2FmJH9p5Q#79n90;$p4!8Cj,Udb^:QD[/Ke?u-Mu;0nrF;>;*,V%8aAV>B"-UrAl/HH
%;24gQDj3J;KB@*R1OgA0bRYNQLNa8Pa>em59(a.h;/#m3=7:;KDr3]/D:dX:e5$%p-7ZHQfWR6c#EfS3gjODAqW<C[e;#_tG.Jg`
%r\r<6@0_6+]Tu[Ks5C&&3drk^j"pQ7+;WT*K^kO]dEK$XLH!i>S+G=dp&=f"VIhbaoQi4Q>B+_3<8':ujP`@^5FtiP#!A8.CVYR:
%h[J0(0Nf4(nGD0VHZf4791+4&,?8r-5.eN'HRPeNM])oZDr:#$kf:lY4hFQaP,^&X;+%(]mgegT%^U)^[tiea`SW]7m$lhup&6T*
%;5TQ?:V5A*&*2s76QJ3QI0s8#YtsQO02?hqhsN.8H_ARLmJ!:V2R_`Gp,n2mo.O_I]>JdGXuNh#4*7KmICFtlonnLcL6I&Z@<Zmf
%\TkI:Dm.H@K@n:dI<X=N>jZ-Yh;8^'96klo\c.'0mn,8'g&Btobr+i'Ij7@.9;D2GNqYKEgYL,0h<b!UmcHZKK==3)fgp/1XT*91
%"+'`^p>t_[DVq5ghp9&^Z+V<<8#((9^3m7KTC;NDCF\m^G<arNp>t,"gYIEZ/p?TU_J'[,*D?>?0W$Ea:=$-b05dr-]@cT?:\g?$
%(ME45.E<D*@^Ud?Q"keiJ`4*l/J?JSh]Bc"/jXutg]-m=Ye!$qo(m17LB`.L^Q0!,2D'&`GOrd':RV7\$:[&*)LnJi4hJEghjk8s
%1ct[$qU#&K6O9it';iu+Xr,ipDqQ2f-U+XER5F`OpI%?N,0'Q@Y`a)LUhbm;L-6[?caJ,5h#=gq.9+qiPo\Cijr4.*?<&;E?bRt\
%F4sdqam@2$)8<uo0E:V[/*aX?I8+GU;3o=>8khNu&f^VW-tbO6o'Hs.9]c@ghTc->IJeVSFsfap1UD4PU?^1P/chslou'i5C+;I&
%(UZDGQ15!W:7S:%!I:k3Vm7&8ZA''`!33`5#ir$"?gCHV!oXu*Sl(d'8SL_b5dK+0Fb!K"[feK7V5)lZ9^<@/)`18^CB:3CV<6d-
%02\^KeVWje9V"0@#ade)D:>W<WfpUF<3:%5.`8Yt.]q9I(R0^DKT]<3/.KMHM7$(&%<:#[hA<aSV'4Q_=<BesqTr>^Lf.KWf%=74
%9V[6q@'/a^%aHM.XfgW`Tc-ZB)Q[Y9_E<MB1'mTg.HcI;'fEM#Bf%\iPfA=[6n:6&fbrb%FXL5[QrCW16gqFdEKZ=H<6^9Od^B@,
%iWedm1uf'u=d9IQ9k^^MNAM/bV()mF_u6bW'N]!%mNt\s';`6s$H$4$'W9tj=/M3J=#ph;AJuO]d<Y0e.8RTB0,1k1CB^*G?up>?
%NTM!X%<Yl`-E*?@k*`._]]'j:fUeI\e7\lQ-s^QFPD6_L/56,*J;'a'_eO[qX@>7!dMT-r[^Adeoo)A2(PHiW9nh_pE9NBu)sXQ1
%'mC+"gBhIaHVuaYn:ZcK,h`:(%B7gZUfpE@U+7kAd,ZpagW%*Kb&B+>FJ\Oa9AS`u-!1=`EPSZ:,=V2M3+cr0C^jHCe%4"cYeh;3
%hQbK:h3`rGKnWEo$=6^iV6b/nC0H5'7NGVmRV#Qn)of_kNRLbr0t0\SQ\$^:H>*^$(Ik7l@GN)4(kIRoDpl@^Y&7[$"G:eRNA;JL
%:gU,H2$0\#jR[J,?HM$%+t?Z]/?c(d)\pVs<u;"=2_NLT)UqFU:2m_3dclQeK[F3h;L.Y-6[8\U2)R\OW`rd]303'PoOs=W/6eq@
%23/f7L"AG57*2M4_4sRa+h[$i>&%2?es(0:.\KjS3jYLcDj[KU\qt[44:tR,O<Co*fgZ`?da_M,ZF.JFdj^?HKbMOtc3M3\bCs%j
%-Q1kRdi'.7'84nDR&lsn<a?&l[T%p_\[RGsL>YL$>ZjRoj]^5#llrgH/^Lm.?sA(J1p#1Z0?n3>;-@=\Mh2VA/6Xm,p..VF9C]l?
%Bt?VT,.nYMIU]2O+b/;ahi5e\cT_O3^gEt70,F.8P"<<t5%L*XO9Y]<OGKjG#MH&CjB`UkC!%d:YL>55E-c"@m_duh9bS"RBe+#R
%3%m\qZD`Ql0bJ82q]'3CN!jF8K'SLY!i&2d,VN"q5"]c&7asqq!M%S3eU_.t8u#uU9gD9J!3^<-esas*'NTcRf"A^'j6Ml*GSEX&
%__[ba^SMZ`7mW#9U2+3.Q*bcM7SH*.J^IXJM..H*2:V#jej1qYRT_f\o-D`5,3=?4H>;t0$sn?5k#;gh3t@uB!d9XmdqY]38W]o*
%mYM/Y@m_dR?pt$GFYjL6ZQDL1*!?duOWoT)Oa,oH_C?j`$B`Y(OZYE,.u>40,.t:.7pq!,-dIQ:e%d&e<n00gjOmE:#'I#u2?ur4
%`'b%b\.hsZhLE17W=!h5,VjO0U&cs(5dXbrZ8dZ6KkAn1l,H"qKTpo4&1;G4Plsu178aq!V89,Yhh>J^ELeYt@l%O57Z>"=>&!Ud
%23+`9]rqRWe,l?G@1-*u`jF](%Lg&9J0;130>)ji0]Kbn<Tu6^`#F[c"3>LPeBPrG6h6D_JeVT=Ne*"u.GY-h^bq.'+B^IK')+6Z
%(oW0R-tb)bhZH9"7<Lj1*9Tc3JGR^qI<>s:W"+uM)uE/qoC\:a!lo)dpW2cmAsXc.>23/@eE7\c'm61k62P+g&4R,WO`9H=EHfiZ
%RG:G<O7"u>NbRi+e9+3I0Wq^^-`HCs0e0f(c/1`HBSC.m&ZmoF\[&4lFh<@T)E[JB.UNs2$Z65ao6iVsesF@<Sip3Vi@[90MQ"'g
%OEHDR2'O50VeW5hA?up&6d=<eacIg2H:r'R.HYua*cZ'`&PNAZg4F(&dTg'^f'^1%(;Ob*=bjC[-@%a+=9Rk&,$0A/EfbrIL++M_
%@(&eINIur%;F;<+:[f><ZgL>@S#Tg,$B,/UnVmt5AIoQ3=lg+#("P5\W`gn]o\le__1P/Q-tIGCS#iH"N$IZiK6O="qcD]oV%]6$
%<`GOoK42Ys.YpWYG7581S#W<$!J3K>@BP:RkYbfq->*l;K&&_ZNC^iu6,6O:=OSO@1E$dYj\=<((g7>f4d<#e*n(7Ea;S4cYmD6J
%(pVno","Zu]-,dMMjpfAOKG4>U&f)SU5"h3<a([6C5<<bU5*?_SVZCG=dfgo_(\eXUKY.>a]_<r9NBJ.6[u%j5+n_TA$Z/=9";u1
%8ii$68\>4#=*;uC;-p@Nh4VF&>0>P0cjBt%<V)Td0PE\QfagecLhIb7<YO`"9@gX1)ie]gL#l96,kh=,@,Vi*L4JCqGGbd+&:f]_
%0#I#Ff!h)NhR;ZJBLjU:"QJX#%gkT?66mai'>dM8&B4ZXf^_\d>FE0:SOjqNj.^7$Ouq&W(lg1D/&Pc+KfZ5eHU6rIL3+S>;6:8-
%-$isM'%!Ho*XG<\Y!G,F;0t3hJ?X<n/Z]-iR]o5b/;<5jC)lT/--g_"cp!8GCIW]Me\#^F0S?,u;!2[Lj.a,^&e3a=f!/A?Q$KV>
%[Nbd>NMSqWVk4"M&"s2'SRe*@>o,uDOCVaX(k<%Ec9t!d&\NEG%GRSU-hY]6cP^E<[]Xl?8]JfMg(q-C@*V9V8QfilNI][R2CNB&
%&`s"R3E38m4NfF-0rIei(q<[tW3B:>/KTVR`pc9.;g!`cBW=pOB&W@.R<`rV$i:/<3_JBR)IS6p@hShXF]P8+9`Vno=GETT#%m$F
%_?cVG_g%NG",$9ZM-6kZWbl$c@1=W1KFqYeI2Ec5C$aQNBO4R:"bt,AoUft3Jflqp%-T6M[0j$gl%/J=Qp.SZl"[bdcghiOdfn^s
%I2tSK&1]3SKn_uth@cPQ1n9lVI:8K_N&EQ0YWj=7=g*H[hh+4!8)Cb(U0Uu."p0F]GaDb$"qf!O*s;c(&j$DH'D,e:@<;[o1cd:j
%7W9do%c1Y^hdLbJU^&I[>@83+9oV:aQmsXFcZDu0Pc4GL61R>V4&aVF@/FlZ\CFF$(o5lj$nWf(./:bJX(:V5LlBqpWNo7R:2,N[
%$7qQ2$0LPko@QqEZBI-V9;8N825#kFbB#q[;Xne\O0#l@=0kcZc:Se`97a@67TaDA/_%]s4?=CcKW5N\MONM.Yj#h6#`Dajm;/Ob
%EU4*_-OL2e$pI6LnOZZc!RcU[qhf5S<cHsF'(If2!'/((*Wf2S8_"r#QUq0n@\laJ/8RHBY^\ZH-^H>gd@OrXj+3A$+ADSX^`(YJ
%Aeh[.Yp!h8>o?g*$u:4jO[s@mB1(Hl(=@u0)eAUkg=$\9WM2Zf>?Vr)LFCJ=X[rmZfZ'cY1@a4g<ogG.IMl8$\6^;R@riEeG84:O
%>fCCm@uMpL8PlU0C=tBO->)NgD]OYiO]j)L"L-:-PmsXAddeNE<*IG9Q:?rbPZQoC[>],Dr!8CeZu""M>pCAedEDI7!Y\*B/DM9^
%=d2\bV@i-i$Zm9>Wes=!5pQu;,K_cm"unB3"l^tNbR=aAW5UTL3PEX%Xn`Wr8)p^R*aRS*Om"!hZ3c?B"VL;2hCHcq(+c1<i;EZ:
%"/R.Q2_5Hs*7#q>-Q+ddo/(@EEFaoB`aR/h29P(:dduZ)`6H/2Zt7em7G<$l('b-Semcu<J-^d=cOm<-?>S,b8oZ:GBs:+N:pAd0
%6"q^6n4j0:0?I>?'e?d#2$AgiCuoJ;k^o$XH#"QtQ(3t+9[KqrG\J=^7;]S@AY^=Up4\'@*K]Gr&XD8bBIYpmI'C14SraBC>,s^n
%::tJU0]POHq8YW;CK]`A7gQ=SN+AG-NTF>"@11%#&GlL5Q+`2Nc@Q9<_3Wf"1Cf#[8&^4,"=@Lb1.!Gn,g.lM0hH`#Z@,R6ZPB_e
%/s8f6bh4)k#trPBPG9JSUe/A&`5%67k6_H+Lk2]2[4m1#nHOIIH9$s3EroVOe<D:`o3=8l"h%**0_fo:D+<2D@G-ADR.`uS$L?us
%"?L6@JZVoP2(EolYn%_XZ7h:n71C/A,Nsk@6=ON\Z>,%ba<!Hc$)Z;+?0QsRi]:kBG-'qZLrrAM1tucN5mnVTNt;fDfmeVK1]OQ7
%GfI$!j9#KoA.=.4[O:_%GhG)dF*J105U:r+^qLmm76YPG69G6F@iq,C[795=f*XT8=VdkIN##PB`'CZ=J_d(UQrgR>.C)3mTI#,n
%)*3P8I%[mT5s?F]gor?fi9MWY!UDcTX')3)9Z6hn>4cdh6I7HeK3"6/0t3Gr(m^9AUhnML,Hs)p<*8`FZX>\Cl(5gKZ2/gKX\1RB
%dpt?C2H@^aDe-2I;6kh8lPRLqK>;/(fbPm'$4bOM_'Ym5]S03aSNaNefW*&._eO/1VLDe4YU8oRA_GP2b$bsk!#m(BPcV!DEu\R$
%O"QrQckiEC\l0g[;G%*W&;Ep1^O2`Z%"(&:PD*'WgOW(Tf?dW%@q$mji@Y5IQnl4FBdAdYU<@$NK6jTQD'Ja1O2@j*Yk9`u#S($\
%RCAi+ksQBZcqZ\m'9&3da\;%q(372iq"_re?dKQBRau8ngL-"cfsS'+0Vi5.2JePm'MZ!OA(m/AJk]Dfd<?:0"^<IrZ*&2#m1V&0
%k>_,0EJ.U((Us(XG1+NT/Nu/,=[ic@Q,+]r@n/`"VBg)Y&XW93l+U]qQ/1RZa`oCRT>AsC:Xj%D^m-1^n>7@0dq&`Q]JfKL1a&A^
%[PP>M.<QB)>YPElXN%n2%9)enCl0^-_=e`tNVZ$p0TZB-+4'i=_BuJ2#*BVSQkl8e@9XM=n1AIK_9s/oe:MirZ&q[hg7R8:CWlSo
%CE('"/!i2n1>"uH^_Ug%D.gdk=E;9\8qeKErWioB?T'eVrqU&s1k3u]IFtDifjTQ!+`D!$,7RiR$&-#XG;"5s>ru!J,=&8M%8A5-
%9nt=L99UjMb2brb1>)9/ZJ2K#G&%s7!8[^1-CV=b_6Unpd4o=C*EWDe<m0(&nZj_V6\/;ZR"s@g(/Jo*fQPRM`hcNLUi>_]2QbBL
%N5MmUD:i'W\%CTf4q9AX+NsV)%)rLt:*!iK[`uJFNK\0=C]sQ_0j/K3eF-fj-5IJoc90%296$?7V@bm`.+L@Z0FZ]*\e.UD2Q%UT
%-10sK_uQ,V>:W-s?;o8D:iO@nb>B7M$85r8M..Fj+7fEAEj!m-!1HSSJf'^emZmRm[3-Y1ZFi_@;e9O[5p>9;=Ot3rSYVsp0jFO`
%qTB;q<]/9l-n@g;;I(/RlH1Z$=`@ar<L,l`=%7Eb(=cAe#+E+Y*&iS8=]SZ,9jLn#T=E==]Wq[/\2&65__-88/-AW&1KpL=.KU,:
%Fu+(H"F'R*d(H1s@,b/ur*>b)qdq2blopBGGeHTH&YcDf+>4[Vif1fi@L$M$Ba,q(V`R5\(^pm8MJ[nE.I:H$JioYol=:k8eL,L7
%FZ8IhN&ZH6inm7KfuAo"d\u(+&q#3aIC2%!nu3f$Pe_+cFCB=!\$IH;AstZ3_;W:9-SR2K32<]o&kb't2`Y\8@a?XDkn\p#\$57*
%8h7+fgqrbFbf^Jq(eku6b$YnNq97]9XYfm/k>5BZ6gFd^?Ag0,h69p9%L[RV,NVY]Uo8PiE>hm^^G.$fTS;X7P:_5n,u36T_IDC#
%89n.A[bV@Gs,jX,-EG*'p6(8jLR1XAgZL7-]6Lq5bA.AtSa"#F][Q@sX9.6eB(%^(gg4Ts$6+X3DW3cI,_rOQ=9DU1In2H-8?P`F
%VFl+jMF;s;(BQFWeH8m-]E0KE_&Ch?Ce8BEm+Kp./lBhDC8UUTG/QNOWYkohQ;=P8rtoi$K,Fd[3&R7X3+t',\5YPUfhk%lDRD0g
%De]tr/l"\ibhRrG&tZOL3fS'Z:",>ci=lGM*m)QNRiTsM/MNk%;tZ-I<<<TI6'DMWh]/6pZP2ctU1EA)ijZb*H,DTl%5@.1dnEhG
%9aVr2$B;sN2B-rho`J`oknGlE66Q=29'4U>Q[K]E_Dp]cVfo5XU_WR_<$PVaXV(\OD/nJip(lLQ$j,=Y)J;mN_sK%B''BC.Q!n-;
%S%,arM>'ZoYm?f2/qo=jVb]Vs7$X0:F`6St32tS;Bo$L_Yf$N"V/8<F<I67:T<itIk$9bh+W!UP<oToSA)jBD[6Bk](d*W5.&,Bk
%&%>(&ENIjcBr@FIFt>8Nm=Rr+Y+ABp^m;`OAOr&AklqF]_3Um/iY]0ZO&$D+\Ul/\Vd3'i:%#M)NCOsGVK$@^$&;<L83Pm\)U@&m
%!S(09.+?$EA#X1DpuEX!%0nV>n!do"/;&IS2?usc!Ge^t`8P[*_g,5KZ('UeXK-<+M-[un,JM,gY]@>2,?3653$oG.a&)rCn"DEB
%=T_ip_.cn2WMq,QD8PAMV_W3*7LK^7YR3"BH:mo@,r0Jn*_RZY6Rrt[%Y7Wu,#tIlIM<2Gn;<8V'<_.op6JXGL#[u&Tne$lW3k"[
%Oa6Em2#q5kqF<)%)`0kULau&p<>c<1ku-c1G;94\Y`VW2mpL*iX1ZX!B.F;S[E/X%JV>=AI!,dIff6'r@1$Y0Y^FH!LflU72Oh)P
%#"RZnZXJH"kclba*P:g$_^;fYEV):[rJKF&9G\T_S3Ra3+ta`U"eSB%d';L+AJZ,J7ts-90H:iX,P'bt!e[RjmK1>LG/Be$lPM00
%AO"VUWU)DQa',&T)\N[NH.?h<J@,hX=^06PP@JI-Bm&(SYKJ7JOSWK[*@%\r.N!pj-W)NLF4djbVN[^!AM%``*k&H(P[;XAnrYK%
%W>;`C>_5[O.J?hmi*HSN\/1/"17R)"RSk9i@iMpU(9[ZldaR=J85C=U;C*O487abCj5<fGBfLdEC-dZ+aE/=t`q2!IM=Ftm.]eC!
%q\[Cp1cRZ@jI6XTdC=k\a<@;O>YtK($#^SS,]Q;snRoHV8lhoLJhWomojQJajK)g"5kqUQO'LTK\8hX#CK'uFO!2@dTC%eO>7"gc
%ka7lT,KX7%\p4bfJ[98(VeSM`e*DIa0c?Mo&;"]?q'Kp1BIBH"T%ikfFqV3U335+.ViF$r=\KY5\[#s2TJlMr1rLB]kY*Fhb/[d?
%q<T*HB8CUB:J:icP=c;ci>`p9^Dl(%PZ8\t<qiB:0s]k=NrqeGa;fcI(JD1!k7CsA*7j8+6*PHOB\1jPB5'XkXiC5QI'PF*%Lq-,
%M9K$U=!!=>F;tra0QJ`]7OZ5&b]Z3/_T)=eVql0)`I8fo=+QO'Z3_!"o8YD=T>MWor&-#)B,q#\3N(QJC(!LYE::B_N3I^H7eF^]
%D&NY5S5X:40r(gqB7qM_B%%`.*!i7,d\TWV.j5@r1uJel,mSM<[83HD![5*P?#5Fl8`b].lOG6fgVN^lS!8V^>qS[`/.fY&9s^r>
%-56shBcTNr:[*Gb*^5k<F5Upq-!Ls1/G\oXmp&c@/SIIP2%._aG#22?lQqXG4IL57s%3u!OaLbR>)*V.=g<Q[WX[">q<!:.e2u09
%^u@00aRVVH1u_6#NA1puZ:HtN+IBE9f0p*c=^.Or"-6B6K5h1Iq$OAF?[X>/]dQ(^VuVKiPHSj:faZ=W,nf=Gf9F4<ZZ#k6EVfO(
%GP_o__o:;P7Qce3I:dbm^A8<cg_L0fM:\fCj85Oc[2f=ble=K2`bGG6ocNom^41nW<">PHdc[g:YBD^:r2[A-qX'UtjkoRbs"**R
%N>&bX^+$d%'I_PV?7jnM2/<(_5s51t*t*q-q<A#maUK)U*l>EgmnhYd+mAdheQYfCC(JZ/rqiC6^:aF(PM*"O(!lpYL>K],rUj7L
%(S<EnC<Z$#P4iS!T!.n#Zbt&\jnA'VL1;cqJt"5AXdE\1h-]&En80^I*g=QJ`N-0i63%q!o>8eEIkpop07A5H&S-^%<5IX&fcE=V
%Lc=eQ#YI5ZpZLkCo@[rjIK/c.r*%@s23+:B\T"Bsq7Y[5KrB7h(e/"AB=$:de5j(QirAM9`R+YlYQi98"PN4ie/ZoH)B5-qc,Fl3
%Rb;o>b;[k#i=JR/in3.ln#3.j)'Qrqr>'VFr&T6q9OMWIJK7DsYm%^ejuBiXI^m_[Y4R&O(.DfTcG.$Ime='@2r!q^]A)$*jmGg2
%r/6U:[QEmCZgb,0Us)r]541*?fDW\YP;#6FFFgXL629FH[s$#&IXgm'oK6MDcJTkeOD>EuV<R``P^=uOqKmB['1[QP`"@'>XUa:)
%#GPR=LC!UlUq?$W;fAKSCHp^_[H2SVAhU;?E9lF8eq^lu$E:"]%M:q!>DMF/#gWp-[3d3O3ZLVM;;^;@ALg[[_EM'3dA"pBZ+Fu6
%!Yo49(h8gYnHm$/fu/J=+2kG:Jlo@eU39eGp0Jjf,5.RIPFTMC:BR4O#dud1$e>T6JJc!Y1'R'R2DtBUS4T)G*"tRUbOMkLPI2U*
%$g$<PQXO7IIYOdT;(0IR;`Lgb_qbr0rKD)fj*iS5[`?+ma56//O'.*s=6OFU))t?-IkI/jdR;h96B6!f"SV_UXn2tG2$uf("JDu&
%VSKuYS.0eKDj;RN)HFm*(h[kP'Z4<<(R#A;Ct<#3EGEcJ:=1B#\<Z'(BS7Js:%@^u@75cod1[]*Af;Llpu&&Z!/\7@<<gEn7n^d7
%ELb3EckF;Y3B@;)EcCtHrO>+0f\)l/HRc%JYI6/#@P(=<Q3kg8G47fLiGu"m5-W)E&3=$ans@06mkIas)hNgK6&7eU,+;YiGS=tL
%4+D5H&5Ha*fe6IYi%GGh&I28s.m36CdgbJ['#OnsF6cp:Jol9)!DjJ83l^,/89H0M;/tD!;6\@@7ZBkf%WTnS`/fr[_%9EDYtbS?
%OgA;K@75AZg]u>"lks:IOsn79_a-4J@;^%nP<U;?+L3)T"'[l5FMK`>8EaJidpW3WRZD>`^RR0=3u[J*5<m0O$?#VJ)WGbH6I,#J
%r$u_2bu.M(_pqs24;\WS0`k1h0,Ut391LK1)$`1*CF$c.D/pCjoAsaI@>j,^Bdoqq+sR$)e6ai`)?`a35rPn)ZEV<.-BRdb^NiG*
%(mh0uREu('i4AUjW(@EXC^:#P*G6UChJfn9LCR1k-@.ipp@r:=+,++83#GK`rE/`7#c'J8,c(@l_Bk?U:>m*Gk8\]S1i>AG=@/^a
%Y\@UW8Qt'mdCcB&_AD$hW>ZBKShJ\K^\LmJ1k`&Lf_e^?aM&[Hro/)Y>g(33HQXsT4l#DFnU"4XH5pm(0mB_<HbRq<#XY]K_nJnu
%+MN17c5BYti]A)0"Qt@.KFc]<3CDW!`C:a5B#5l#[=OC9ZWRe+*#dE56/mN+mKME\SJ_X9d0sYeYQ]_i4a`dr?2Q\hV3;0F>)lKT
%GMLlgFc3c<`qa2Vl@lf<USt_qc'4pCE\'^/]-glontb@<gj9[#"lSG[c6[O*qobs*_<#GI&gVg63F%&K9Rj/gFJ2^;ZW?*l5TqU<
%03Cq*?'k4se?N@[7=<V93ugCD->;+H4c1.R]&[S8RE8KU\T9CjDba56f:7KZI1bVPJrdD\)DGi1P]iu:pZ=(@g_+40cml*^b\Si-
%i!Pe.kPo<T'12sC5WX(L!\/qFal8F#7qNb](sH?_qq4(urb.)jEm,MaJ;ER($CG(=_:R/_R`C7mU6qAmCqf[0WLS3-!QMT$!)hE&
%om"EQ-!Dk!9Z]48+f[<9NM[3U8dJnA3'VAAV,7<S.-/9hI5ng_W(]JCfl7FMq/3[Tl+3QOrW^Kab"[(n$d3#s,:uF1>M,NUI,-7l
%q]Y"[SlYQZW"Dq7oR-Hh_$gT!L93:@E"1SaO:%F@&fK?EPU$>$!R`)]+Nij4<^''dUj.N=#Jkuf/Y.(7:k%YG__Z,7OT968@58JH
%5c"%K>U>5EZgnF/(e`^@'ZBGtcalV/+3$*soRn_CE5jJg"lgIu<J3"f(5<?"i-(@5a0EFgFH*NC.Z?g*XV52@LIaZTkD9,I8(e>p
%0OXLSeU=efdKeW@l>J06)b&)f6*%`0gqLc)o%i_GGP1q-LGAD!.HTF$81[fR_sZl1I<7DUN93?D^=2uIV0J=1/s5@(J+rNufAA$k
%pJ*?C+5VIET5a[uIf+omFW2u8mdc;KF+lrrhl)$CrB5AciV:,E@[[mq>%V3QC,^b<3=)4,il/m1PeFTe+G<Sr@eZAMSlI]TDO_h;
%H]48(ikZ]fJbUp-n3f#X7-lXiO)A6B:+AV6!Q:!hdKV6d4qF7$g=D&6mcu)O,:B,%=3U_uT]<26^1roK59s8IfeL`0N<C7TSW#uF
%_Mq`1n4cg3#@Fm9F]HmCK>8H0gD`Y,(Pn5^0k1c]hhd0t>t72O4#*cQL;"1ujZ:eaf4:<u0%F!?!6ZW9!?Jj[ogqKp*V4ao9P'%:
%bd#c><98crnSg"%Kk$(I9nP&;*:,F#G@!r2i(eP%pH;6g_52g#,C!<MW\lCP+Gu6GcRis+TL+#@;]UGtj%aKjChIF@"qq0]_mY4S
%[P\-T@[dDDM+EPq@5q0E'\+'jehueaWT>mN7!G^DV]:JSb%<Qqim4QHZ-+HK%ojMGs/&YIBF/F+>lg<e7%Z9n/:@DsMDlJJX`cjq
%:2:F)5cTT]\p=FKXr^*2AHk1`=9g$$g>%2gj6gVd640cD*14.>YN)WTDJbM_dGoZ?V-L;/0/jtj:TrijN.+Wf7;V0H-uU=G9t6.V
%dK(!?WRI$:(je):8ZL8PR#q8gY)hg&Gp;3))e'fr![\oPX*KA;pQbk=UnP1M,VfW0q'/%jVN$5^04?d%!"EW^3T.X]WG6T``18L2
%fR3B)pY5:!=s:qM[F*#$ZI8PA\`9LmonRf\`+gM+fAWSR,ca%g)k=m.F_7@=(PBlW:)aDdPjt?)l!eg[H@)'_f?S`dQe?=5*8D$*
%'+s!)h5./kU/!&b"e;&3^)>QD=6:+CS0MP(b`iX=0K-]r@<E';^7Z!![/$_>TV@VhKZ6&0<H,<o$SM6Yge\qB7eJJ;3TFGDV-`@j
%[]j0C0dZSLM)mh+7!s]*#YZ#XMELVm8T)+m9d=NjmXK2c8)25Ui@5,g"V7tKA*nMrV@&7<Y:\Vqb?%r8E\#.?[5Ho$G3_CGfc*m6
%S<iIR.YXOQJs,al9fXpQ/XU;=Ud(1YOke+M:bBH$-!<)ME>:KfL<C+1)g)G$kOjLG^m,Lm%&Z(LWC3.,Aa:?g#`'mkD.Ut,6,^$_
%rd9]o$D!/QK,/HGFhJT^/XM*/SN4u:>B'-^%ib(>/^u-t)-:$7@!Y_,=\7m0I4`+Q@Zf=MQh4AfV@$J_6QCqbc6ALj[T4\[Zc);h
%;_&S3R-'bC[-epp!]Ara>E'$TNC<sTjPq(h)AdD_]#.iqQu_MGfV>:UlTX1RT<D6n9lF."(-3\`rgI,LRC=INa%8.ekeM.8a!V:\
%58ZqE;/ZN0S!mo-D,sRoBW<=kBI/!P)'d`=N8XfTOiSte+!;1i_e&$^(7KotLIX$?l?+Qr:#3-!Qm4gtgpGI&kj!l&T/Zfa6>ia+
%&04+0Fi=`)3BP/0G=6r_)m*'CL9Ht=Kr]F<>!J,_e"?l#NJ_tN(+k&6>?YdaYRm([/.#MfY(tL4gK?;ZeDWULWEf+<O:K`qP"%e?
%-')_tBQ-r1b6_F4BdOm?[:R?b7C?m+5LY;sl;g@`ohd93HLVHVHc^ir4cMZZ#q&9_GFJ+[QdDZ7d:f!%d[SK'BunZ($&5ML-4EGa
%2n@oB*pdrgf-]D+C:Yl'r/)EDgLEKA6m)n89S*+M3KNiGU-nd0(0hV4PX-(l&/*1kgPlG,UJWA^$s0G!Ks?r_L^YG82FEuP;bsH1
%+[e\o&3n%aBH6"+)60I\oA1hD;D:.K"<HEO$,\Z%I3SrcYmsJbUk@C"TgV!_%\1-LG:QDOp,;7jC9,>)ieY+!Hb)ohLQBAL>KU(,
%cH.i'ZoENA,hNb8_`[1;.lG^F(JCW[2Bcm<X4N+B(`[hO"tc[j,F\lCGL\C8.H0OUh2raQe5BYq]bZp)d`#8>(qHFP/Tk!lJ;Ed:
%$f5'J9/l[&+?ZKN6[T"noG?q5bS.XSD3h/)0P6Dqp1!oBpZc@;Z/=@ODf<*,G-gSd(%UeLdkA&:2nRh^p!%AtqsO:c5U]9!rp8>7
%lV6oa!C*t14o~>
%AI9_PrivateDataEnd

cleartomark
countdictstack exch sub { end } repeat
restore grestore
%
% End Imported PIC File: quarter_view.eps
%%EndDocument
%
% Polyline
15.000 slw
gs  clippath
1635 4035 m 1515 4035 l 1515 4323 l 1575 4083 l 1635 4323 l cp
eoclip
n 1575 7875 m
 1575 4050 l gs col0 s gr gr

% arrowhead
n 1635 4323 m 1575 4083 l 1515 4323 l  col0 s
% Polyline
gs  clippath
1635 2985 m 1515 2985 l 1515 3273 l 1575 3033 l 1635 3273 l cp
eoclip
n 1575 3525 m
 1575 3000 l gs col0 s gr gr

% arrowhead
n 1635 3273 m 1575 3033 l 1515 3273 l  col0 s
/Times-Roman ff 270.00 scf sf
1800 3825 m
gs 1 -1 sc (83 cm) dup sw pop neg 0 rm  col0 sh gr
/Times-Roman ff 270.00 scf sf
1800 2850 m
gs 1 -1 sc (1 m) dup sw pop neg 0 rm  col0 sh gr
/Times-Roman ff 270.00 scf sf
2250 9075 m
gs 1 -1 sc (\(beamspot is about 3 cm wide in Z, tiny in XY\)) col0 sh gr
$F2psEnd
rs
