%!PS-Adobe-3.1 EPSF-3.0
%%Title: radiators.eps
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0%AI9_PrintingDataBegin%%For: Sheldon Stone
%%CreationDate: 7/3/2002
%%CropBox: 0.000000 0.000000 312.434082 168.750000
%%BoundingBox: 0 0 313 169 
%%HiResBoundingBox: 0.000000 0.000000 312.434082 168.750000
%%LanguageLevel: 2 
%%DocumentData: Clean7Bit
%%Pages: 1 
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_CoolType_Core 1.1 0
%%+ procset Adobe_AGM_Core 2.0 0
%%DocumentFonts: 
%%DocumentSuppliedFonts: 
%%PageOrder: Ascend
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 

%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 233 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_dst64 64 string def
/AGMCORE_srcLen nd
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_imagestring0 nd
/AGMCORE_imagestring1 nd
/AGMCORE_imagestring2 nd
/AGMCORE_imagestring3 nd
/AGMCORE_imagestring4 nd
/AGMCORE_imagestring5 nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_mbuf () def
/AGMCORE_ybuf () def
/AGMCORE_kbuf () def
/AGMCORE_gbuf () def
/AGMCORE_bbuf () def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_arg1 nd
/AGMCORE_arg2 nd
/AGMCORE_&setgray nd
/AGMCORE_&image nd
/AGMCORE_&colorimage nd
/AGMCORE_&imagemask nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&&setcolorspace nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_in_rip_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ccimage_exists nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_ndx nd
/AGMCORE_err_strings nd
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/bdf
{
	bind def
} bind def
/xdf
{
	exch def
} def
/ldf 
{
	load def
} def
/ddf
{
	put
} def	
/xddf
{
	3 -1 roll put
} def	
/xpt
{
	exch put
} def
	/bdict
	{
		mark
	} def
	
	/edict
	{
		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
	}def
	
/ps_level
	/languagelevel where{
		pop languagelevel
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/ndf
{
	1 index where{
		pop pop pop
	}{
		dup xcheck
		{bind}if
		def
	}ifelse
} def
/skip_image
{
	has_color ne{
		dup 256 idiv
		{currentfile AGMCORE_str256 readstring pop pop}repeat
		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval
		readstring pop pop
	}{
		pop
	}ifelse
} def
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
} def
/colorbuf
{
	0 1 2 index length 1 sub
		{
		dup 2 index exch get 
		255 exch sub 
		2 index 
		3 1 roll 
		put
		} for
} def
/makereadonlyarray
{
	/packedarray where
		{pop packedarray}
		{array astore readonly}
	ifelse
} def
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq 
	{
		dup /HalftoneType get 1 eq
			{
			/SpotFunction get
			}
			{
			dup /HalftoneType get 2 eq
				{
				/GraySpotFunction get
				}
				{
				pop
				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}
				{dup mul exch dup mul add 1 exch sub}ifelse}bind
				}
			ifelse
			}
		ifelse
	}
	if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	userdict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	/AGMCORE_arg2 xdf
	/AGMCORE_arg1 xdf
	
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			dup (.) ne AGMCORE_arg1 0 lt and
				{
				pop
				}
				{
				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
					{
					currentpoint AGMCORE_deltaY sub exch pop
					clippath pathbbox pop pop pop 44 add exch moveto
					} if
				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
				} ifelse
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
			dup 94 eq 
				{
				pop
				AGMCORE_arg1 0 ge
					{
					AGMCORE_arg1 AGMCORE_str256 cvs
					dup /AGMCORE_tmp exch length def
					AGMCORE_str256 exch 0 exch putinterval
					AGMCORE_str256 0 AGMCORE_tmp getinterval
					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
						{
						currentpoint AGMCORE_deltaY sub exch pop
						clippath pathbbox pop pop pop 44 add exch moveto
						} if
					AGMCORE_str256 0 AGMCORE_tmp getinterval show
					}
					{
					/AGMCORE_arg1 0 def
					} ifelse
				0 1 AGMCORE_str256 length 1 sub
					{
					AGMCORE_str256 exch 0 put
					}for
				/AGMCORE_tmp 0 def
				AGMCORE_arg1 0 ne
					{
					/AGMCORE_arg1 AGMCORE_arg2 def
					} if
				}
				{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
				}ifelse
			} ifelse
		} forall
} bdf
level2{
	/AGMCORE_map_reserved_ink_name
	{
		dup type /stringtype eq{
			dup /Red eq{
				pop (_Red_)
			}{
				dup /Green eq{
					pop (_Green_)
				}{
					dup /Blue eq{
						pop (_Blue_)
					}{
						dup /Cyan eq{
							pop (_Cyan_)
						}{
							dup /Magenta eq{
								pop (_Magenta_)
							}{
								dup /Yellow eq{
									pop (_Yellow_)
								}{
									dup /Black eq{
										pop (_Black_)
									}{
										dup / eq{
											pop (Process)
										}if
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}if
	}def
}if
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not
		{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror
			{
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and {
				$error /newerror false put
				AGMCORE_cur_err /AGMCORE_bad_environ eq
					{
					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version
					}
					{
					AGMCORE_cur_err 0 0
					} ifelse
				compose_error_msg
				} if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
		/AGMCORE_&&setcolorspace /setcolorspace ldf
	}if
	/AGMCORE_&image systemdict/image get def
	/AGMCORE_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMCORE_&colorimage /colorimage ldf
	}if
	/AGMCORE_in_rip_sep
		level2{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_gstate_known{
		where{
			/Adobe_AGM_Core_Id known
		}{
			false
		}ifelse
	}ndf
	/AGMCORE_GSTATE AGMCORE_gstate_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 7 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	end
}def
/page_setup
{
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or
		}ifelse
	def
	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
	}ifelse
	{
		/setcmykcolor[
			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx
			/setcmykcolor load dup type/operatortype ne{/exec cvx}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/ln /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		/invert_image_samples
		{
			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
		/get_gstate
		{
			AGMCORE_GSTATE begin
			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def
			/AGMCORE_GSTATE_clr_spc currentcolorspace def
			/AGMCORE_GSTATE_clr_indx 0 def
			/AGMCORE_GSTATE_clr_comps 12 array def
			mark currentcolor counttomark
				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put
				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop
			/AGMCORE_GSTATE_fnt rootfont def
			/AGMCORE_GSTATE_lw currentlinewidth def
			/AGMCORE_GSTATE_lc currentlinecap def
			/AGMCORE_GSTATE_lj currentlinejoin def
			/AGMCORE_GSTATE_ml currentmiterlimit def
			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf
			/AGMCORE_GSTATE_sa currentstrokeadjust def
			
			/AGMCORE_GSTATE_clr_rnd currentcolorrendering def
			/AGMCORE_GSTATE_op currentoverprint def
			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def
			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def
			currentcolortransfer 
				cvlit /AGMCORE_GSTATE_gy_xfer xdf 
				cvlit /AGMCORE_GSTATE_b_xfer xdf
				cvlit /AGMCORE_GSTATE_g_xfer xdf 
				cvlit /AGMCORE_GSTATE_r_xfer xdf
			/AGMCORE_GSTATE_ht currenthalftone def
			/AGMCORE_GSTATE_flt currentflat def
			end
		}ndf
		
		/set_gstate
		{
			AGMCORE_GSTATE begin
			AGMCORE_GSTATE_ctm setmatrix
			AGMCORE_GSTATE_clr_spc setcolorspace
			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get
			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor
			AGMCORE_GSTATE_fnt setfont
			AGMCORE_GSTATE_lw setlinewidth
			AGMCORE_GSTATE_lc setlinecap
			AGMCORE_GSTATE_lj setlinejoin
			AGMCORE_GSTATE_ml setmiterlimit
			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash
			AGMCORE_GSTATE_sa setstrokeadjust
			
			AGMCORE_GSTATE_clr_rnd setcolorrendering
			AGMCORE_GSTATE_op setoverprint
			AGMCORE_GSTATE_bg cvx setblackgeneration
			AGMCORE_GSTATE_ucr cvx setundercolorremoval
			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx
				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer
			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
				{
				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne
					{
					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark
					} if
				}{
				AGMCORE_GSTATE_ht sethalftone
				} ifelse
			AGMCORE_GSTATE_flt setflat
			end
		}ndf
		AGMCORE_producing_seps not{
	
			/setcolorspace where{
				/Adobe_AGM_Core_Id known not
			}{
				true
			}ifelse
			{
				/setcolorspace
				{
					dup type dup /arraytype eq exch /packedarraytype eq or{
						dup 0 get dup /Separation eq{
							pop
							[ exch {} forall ]
							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put
						}{
							/DeviceN eq {
								[ exch {} forall ]
								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put
							}if
						}ifelse
					}if
					AGMCORE_&&setcolorspace 
				}def
			}if
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/ln{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/op /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/Adobe_AGM_Core 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	Adobe_AGM_Core/AGMCORE_name xddf
	false
	currentpagedevice/SeparationColorNames get{
		AGMCORE_name eq or
	}forall
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	1 setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMCORE_&imagemask
			}{
				AGMCORE_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMCORE_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMCORE_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/rdline {
	currentfile AGMCORE_str256 readline pop
} def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMCORE_src256 readstring pop
		dup length /AGMCORE_srcLen exch def
		/AGMCORE_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{
			1 index exch get
			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put
			/AGMCORE_ndx AGMCORE_ndx 1 add def
		}for
		pop
		AGMCORE_dst64 0 AGMCORE_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
	 						currentoverprint not{
			 					1 AGMCORE_&setgray
	 							knockout_image_samples
			 					currentdict imageormask_sys
			 				}{
			 					nulldevice currentdict imageormask_sys
			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										nulldevice
									}{
										invert_image_samples
									}ifelse
								}{
		 							currentoverprint not{
		 								knockout_image_samples
				 					}{
				 						nulldevice
				 					}ifelse
					 			}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
									
								currentcolortransfer
								{pop 1} exch addprocs 4 1 roll				
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								setcolortransfer
									
								MultipleDataSources NComponents AGMCORE_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
		 								currentoverprint not{
		 									knockout_image_samples
				 						}{
				 							nulldevice
				 						}ifelse
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/tint_image_to_color
{
	begin
		Width Height BitsPerComponent ImageMatrix 
		/DataSource load
	end
	Adobe_AGM_Core begin
		/AGMCORE_mbuf 0 string def
		/AGMCORE_ybuf 0 string def
		/AGMCORE_kbuf 0 string def
		{
			colorbuf dup length AGMCORE_mbuf length ne
				{
				dup length dup dup
				/AGMCORE_mbuf exch string def
				/AGMCORE_ybuf exch string def
				/AGMCORE_kbuf exch string def
				} if
			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop
		}
		addprocs
		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage	
	end
} def			
/sep_imageormask_lev1
{
	begin
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{
				255 mul round cvi GrayLookup exch get
			} currenttransfer addprocs settransfer
			currentdict imageormask
		}{
			/sep_colorspace_dict AGMCORE_gget/Components known{
				MappedCSA 0 get /DeviceCMYK eq{
					Components aload pop
				}{
					0 0 0 Components aload pop 1 exch sub
				}ifelse
				
				Adobe_AGM_Core/AGMCORE_k xddf 
				Adobe_AGM_Core/AGMCORE_y xddf 
				Adobe_AGM_Core/AGMCORE_m xddf 
				Adobe_AGM_Core/AGMCORE_c xddf 
					
				AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{
					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer
					currentdict imageormask
				}{ 
					
					currentcolortransfer
					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer
					currentdict tint_image_to_color
				}ifelse
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
					currentdict imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	end
}def
/sep_image_lev1_sep
{
	begin
		/sep_colorspace_dict AGMCORE_gget/Components known{
			Components aload pop
			
			Adobe_AGM_Core/AGMCORE_k xddf 
			Adobe_AGM_Core/AGMCORE_y xddf 
			Adobe_AGM_Core/AGMCORE_m xddf 
			Adobe_AGM_Core/AGMCORE_c xddf 
				
			{AGMCORE_c mul 1 exch sub}
			{AGMCORE_m mul 1 exch sub}
			{AGMCORE_y mul 1 exch sub}
			{AGMCORE_k mul 1 exch sub}
		}{ 
			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
		}ifelse
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMCORE_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or{
 								knockout_image_samples
		 					}{
		 						nulldevice 
		 					}ifelse
							currentdict imageormask_sys
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/read_image_file
{
	AGMCORE_imagefile 0 setfileposition
	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	{ (AGMCORE_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Core/AGMCORE_imagefile xddf 
		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMCORE_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMCORE_imagefile exch writestring
		}for
		true
	}ifelse
}def
/imageormask_l2_overprint
{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile
	}{
		currentdict imageormask
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				nulldevice currentdict imageormask_sys
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_imageormask_lev1
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		currentdict
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
			imageormask
		}{
			
			MappedCSA 0 get /DeviceGray eq {
				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceCMYK eq {
					currentcolortransfer
					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}{ 
					currentcolortransfer
					{pop 1} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}ifelse
			}ifelse
		}ifelse
	end end
}def
/indexed_image_lev1_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMCORE_&imagemask
		}{
			AGMCORE_&image
		}ifelse
			
	end end
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false op [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/NComponents 1 def
			/ImageType 1 def
			/Decode [0 1 def]
			/SkipImageProc {false} def
			currentdict
		end
	}if
	dup begin
		/HostSepColorImage false def
		currentdict/Decode known not{
			/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
			] 
			def
		}if
		currentdict/Operator known not{
			/Operator /image def
		}if
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/cpaint_gcomp
{
	AGM_preserve_spots{
		gsave
		nulldevice
	}if
}def
/cpaint_gsep
{
	AGM_preserve_spots{
		grestore
		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 
	}{	
		gsave
		nulldevice
	}ifelse
}def
/cpaint_gend
{
	AGM_preserve_spots{
		Adobe_AGM_Core/AGMCORE_ovp get setoverprint
	}{
		grestore
	}ifelse
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 1.1 0
%%Copyright: Copyright 1997-1999 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 1.1 0
userdict/Adobe_CoolType_Core 40 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def}if currentpacking true
setpacking/bdf{bind def}bind def/ldf{load def}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto ldf/nfnt/newencodedfont ldf/mfnt/makefont
ldf/sfnt/setfont ldf/ufnt/undefinefont ldf/chp/charpath ldf/awsh/awidthshow
ldf/wsh/widthshow ldf/ash/ashow ldf/sh/show ldf end userdict
/Adobe_CoolType_Data 2 dict dup begin/WidthShowArray 256 array def
/GenFauxMMInst{}bind def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if Adobe_CoolType_Core/unload get exec systemdict
/undef known{userdict/Adobe_CoolType_Data undef}if}bind def/page_setup{
Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict
/languagelevel known{systemdict/languagelevel get 2 ge{userdict
/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1
index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup
systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup
where pop exch get/globaldict where{pop end}if end end def/systemfindfont
/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1
index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1
add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dup null eq{pop}
{{def}forall}ifelse currentdict end exch setglobal}bdf/newencodedfont{findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding exch
def currentdict end definefont pop}bdf/scff{$SubstituteFont begin dup type
/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def
/$fontname 1 index dup type/stringtype eq{cvn}if def/$used false def end
findfont $SubstituteFont begin $used{currentglobal exch dup gcheck setglobal
null copyfont begin/FontName $fontname def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}if/$sname null def
/$slen 0 def end}bdf/ConcatStrings{dup 0 exch{length add}forall string exch 0
exch{3 copy putinterval length add}forall pop}bind def/BeginFauxMMFont{1 index
findfont pop 2 array astore ConcatStrings 3 1 roll($)exch 3 array astore
ConcatStrings exch findfont currentglobal exch dup gcheck setglobal null
copyfont/tempfontname exch definefont pop exch 12 dict begin/FontName exch def
/FontType 0 def/FMapType 6 def/FontMatrix matrix def/PaintType 0 def}bind def
/EndFauxMMFont{currentdict end dup/FontName get exch definefont exch setglobal
exch mfnt sfnt}bind def/GenFauxMMInst{Adobe_CoolType_Data/GenFauxMMInst get
exec}bind def/DefFauxMMInst{Adobe_CoolType_Data exch/GenFauxMMInst exch bind
put}bind def/WSALoop{4 copy 1 index add 1 sub 1 exch{3 copy put pop 1 add}for
pop pop 3 2 roll add exch 256 add}bind def/BuildWidthShowArray{currentfont
begin FontType 0 eq dup{pop FMapType 6 eq}if{SubsVector dup length 1 sub 1
exch getinterval}{()}ifelse end Adobe_CoolType_Data/WidthShowArray get 0 0 4 3
roll{WSALoop}forall 256 2 index sub WSALoop pop pop pop}bind def/wsa{
Adobe_CoolType_Data/WidthShowArray get}bind def/?set{$SubstituteFont begin
/$used false def/$fontname 4 index def end 3 index findfont $SubstituteFont
begin $used{false}{dup/FontName known{dup/FontName get $fontname eq 1 index
/DistillerFauxFont known not and}{false}ifelse}ifelse exch pop end{exch pop
exch pop exch 2 dict dup/Found 3 index put exch findfont exch}{exch exec exch
findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put
copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def
/?add{1 index type/integertype eq{exch true 4 2}{false 3 1}ifelse roll 1 index
findfont/Downloaded known{exec exch{exch ?str2 cvs exch findfont/Downloaded
get 1 dict begin/Downloaded 1 index def ?str1 cvs length ?str1 1 index 1 add 3
index putinterval exch length 1 add 1 index add ?str1 2 index(*)putinterval
?str1 0 2 index getinterval cvn findfont ?str1 3 index(+)putinterval 2 dict
dup/FontName ?str1 0 6 index getinterval cvn put dup/Downloaded Downloaded put
end copyfont dup/FontName get exch definefont pop pop pop}{pop}ifelse}{pop
exch{findfont dup/Found get dup length exch ?str1 cvs pop ?str1 1 index(+)
putinterval ?str1 1 index 1 add 4 index ?str2 cvs putinterval ?str1 exch 0
exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn 1 dict exch 1 index
exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}
ifelse}ifelse}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def
/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{
currentfont/Downloaded known{moveto pop pop}{pop pop moveto}ifelse}bind def
setpacking end userdict/$SubstituteFont 20 dict put 1 dict begin
/SubstituteFont dup $error exch 2 copy known{get}{pop pop{pop/Courier}bind}
ifelse def/currentdistillerparams where dup{pop pop currentdistillerparams
/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{
countdictstack array dictstack 0 get begin userdict begin $SubstituteFont
begin/$str 128 string def/$fontpat 128 string def/$slen 0 def/$sname null def
/$match false def/$fontname null def/$used false def/$fontname null def
/$italicangle 26.5 def/$findfontByEnum{dup/$fontname exch def $sname null eq{
$str cvs dup length $slen sub $slen getinterval}{pop $sname}ifelse $fontpat
dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def mark{
$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}
stopped cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$buildfontname{length $str 1 index(-)
putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$used true def dup length $slen gt $sname null ne or $slen 0 gt and{$sname
null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse
dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap findresource
/CIDSystemInfo get{def}forall $findfontByROS}{pop $findfontByEnum}ifelse}{
//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$used
true def dup length $slen gt $sname null ne or $slen 0 gt and{$findfontByEnum}
{//SubstituteFont exec}ifelse end}}ifelse bind readonly def}{/findfont{
$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName get 2
index ne}{true}ifelse dup{/$used true def}if{$slen 0 gt $sname null ne 3 index
length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add
dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end
definefont}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end}if
end
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin
/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at least
PostScript Level ^	and at least PostScript version ^. Ensure that the PPD is correct or that
the PostScript  level requested is supported by this printer. ) def
/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate
with on-host methods. ) def
/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end put
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
%%EndSetup
%%Page: name:1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
1 -1 scale 0 -168.75 translate
gsave
[1 0 0 1 0 0 ] concat
gsave
0 0 mo
0 168.75 ln
312.434 168.75 ln
312.434 0 ln
clp
1.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
163.694 73.5 mo
163.694 24 ln
158.694 32.5 mo
163.694 24 ln
168.944 32.5 ln
false op
0 0 0 1 cmyk
s
0.5 lw
151.194 52.25 mo
135.694 66.5 ln
142.194 65.25 mo
135.694 66.5 ln
137.694 60.25 ln
176.194 52.25 mo
191.944 66.5 ln
189.944 60.25 mo
191.944 66.5 ln
185.444 65.25 ln
s
1.5 lw
164.194 161.5 mo
164.194 112 ln
159.194 120.5 mo
164.194 112 ln
169.194 120.5 ln
s
0.5 lw
164.194 151.75 mo
127.444 119 ln
129.444 125.25 mo
127.444 119 ln
133.944 120.25 ln
164.194 151.75 mo
200.944 119 ln
194.444 120.25 mo
200.944 119 ln
198.944 125.25 ln
s
15.4438 126.25 mo
15.4438 140.25 ln
17.9438 136 mo
15.4438 140.25 ln
12.9438 136 ln
15.4438 168.75 mo
15.4438 154.5 ln
12.9438 158.75 mo
15.4438 154.5 ln
17.9438 158.75 ln
291.694 123.25 mo
291.694 137.5 ln
294.194 133.25 mo
291.694 137.5 ln
289.194 133.25 ln
291.694 157.25 mo
291.694 143.25 ln
289.194 147.5 mo
291.694 143.25 ln
294.194 147.5 ln
128.444 80.75 mo
43.4438 80.75 ln
47.6938 83.25 mo
43.4438 80.75 ln
47.6938 78 ln
199.194 80.75 mo
284.194 80.75 ln
279.944 78 mo
284.194 80.75 ln
279.944 83.25 ln
s
save_ctm
restore_ctm
save_ctm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
11 dict begin
/FontName /TimesNewRomanPSMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b8302fd45b0609d6bde5a48b0240d44d91aabd11b7ee50303a
812fda6ed97443c437b8d3bea589> ND 
/space 
<10bf317079c757bf91> ND 
/zero 
<10bf31705d64a97b20dbc4561ea81104c96d02e040b796018bdd76156eea
3db16183ecf4cc6279dee9c38e6607a03100239f4f3aa70f499a46ee2ad0
95bfd81827f0ea517102478d1ea30e2ab4809d51dc00f2b2937235f1383a
1171391da119827a889d468d0fef18fa68d7065dec4654c9fabf42a3cfdc
847c9f647697db80ef848a980f81e5b6fa658ec0bdbae203e1a383b29226
4aaa89d457b592913427d12aa0094e427932> ND 
/one 
<10bf317005ae401898a67a8f6de1f54e88dd29653934d9c9d13cdae233b3
b142a53cd85d6c2b53d8428e01692df35a57cb3213f86306d17c4bb48153
39ff92b566dde7f5e8beed94324fe5fa93082ee6e6eb015f39ccd232e6e9
99eb9a2591a6373053390d93cb7dc88c33> ND 
/m 
<10bf3170612f50a32a221f92c62df6f217e624d0a9df1e121860640913cc
4ecc3a138d612e3e6b1555b8b5668e22b0607a04918021dba3548ea6fedb
48bfbd6292ce866280a027ff483fff6540a8d19cf2ae15867ad24b38f48a
dfd7323594892dd5302ed6c6a9a1cd257580aa82857c8c52850d241d0e7b
8193a9c467c1fa9bf4b46c26b8cbf24f820f9835779266c9277722e9b1c1
a0cf10430b323c0157251b447641c468d8fccf15adb114dac569e1535962
e5b22f8be705b15c37301577b6743fef641a5494c719022e8522c4cf32c6
66362c2b4632ed1664a00baaf78be3b76421c8b24b7d485d056c18474524
9a871bc0b1d3f3cae1778c6ed8d453bf61981853c93fb2b4fa521a0beac2
57ac875ad7e9cbeabf43814e4b2b4b4987118b5bb7a7d3bc18c0d0c118ac
90944cb3aa85baf6308e32cf2d0ba5e1b0c6865eac8e90b8878c03614607
3ff9250764c5fb8aa66641b8ed93cc40dcf1ebf57f048569812a> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/TimesNewRomanPSMT findfont /Encoding get
dup 32 /space put
dup 48 /zero put
dup 49 /one put
dup 109 /m put
pop
%ADOEndSubsetFont
/TimesNewRomanPSMT*1 
[
32{/.notdef}repeat /space 15{/.notdef}repeat /zero /one 59{/.notdef}repeat /m 146{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*1 findfont [9.75 0 0 -9.75 0 0 ]mfnt sfnt
BuildWidthShowArray
0 151 mov
(10 mm) sh
restore_ctm
save_ctm
/TimesNewRomanPSMT*1 findfont [9.75 0 0 -9.75 0 0 ]mfnt sfnt
BuildWidthShowArray
145.54 84.25 mov
(1) sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs

systemdict begin
/TimesNewRomanPSMT 
findfont dup
/Private get begin
/CharStrings get begin
/seven 
<10bf3170422f935763586cd8dbf7f37293dfe15df8bc39017a0dd6cfc40a
e05de611a780ab9259b06bec8915fe24cb39609bd69cbcf5> ND 
end end
end
/TimesNewRomanPSMT findfont /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
/TimesNewRomanPSMT*2 
[
55{/.notdef}repeat /seven 200{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*2 findfont [9.75 0 0 -9.75 0 0 ]mfnt sfnt
BuildWidthShowArray
150.415 84.25 mov
(7) sh
/TimesNewRomanPSMT*1 findfont [9.75 0 0 -9.75 0 0 ]mfnt sfnt
BuildWidthShowArray
155.29 84.25 mov
(0 mm) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs

systemdict begin
/TimesNewRomanPSMT 
findfont dup
/Private get begin
/CharStrings get begin
/four 
<10bf317069b1fd7146b17c113b617a69456a1f46fa86f93a1743e1bde519
49e5c8665d9cf49ab4179aecaf779fa834a317855eb2ce61cdee1d727f> ND 
end end
end
/TimesNewRomanPSMT findfont /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/TimesNewRomanPSMT*3 
[
52{/.notdef}repeat /four 203{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*3 findfont [0 -9.75 -9.75 0 0 0 ]mfnt sfnt
BuildWidthShowArray
309.444 152.982 mov
(4) sh
/TimesNewRomanPSMT*1 findfont [0 -9.75 -9.75 0 0 0 ]mfnt sfnt
BuildWidthShowArray
309.444 148.107 mov
( mm) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs

systemdict begin
/TimesNewRomanPSMT 
findfont dup
/Private get begin
/CharStrings get begin
/a 
<10bf31705d647142d5ee6b7c4c12c41164f05a89990635873917bf00c5a2
b14d28b3178c99debafa4bcb1c40a4e56d0addd816a31c394a72e26692a8
6a166b148b23762db7428a0403f596345c58aef49f4e760021f5a41e083f
8664f28e6226dd27b0366032a591dbbd9b06d316db3742e33f8b8d8eeb02
cc352d4c86784a96089880fba8fe005583f280300a5f8c36cbbc4ac165e2
fd0722aef79dfa8b6716e29c04abc482e72103650775b6504cb092faf756
cc7a21c6cfee9c8b40c78df16e142eee6e66102a551882fb763df5f44d0f
c2d39818da008054cd98962d9968d7754d74fcdb6e193266e8866ed18dc7
271106dc7981419cd71f3ad98b46dd7c197b85505369f689c6a9b7674d98
90ac> ND 
/c 
<10bf31705fc10320935f517e088588bc677b6f6b1116d76a45fb5fc081aa
57ac5a27e5f5a5379ff7f115093a47f1e1902fbe23623a5343c877b632d8
7d5bf00c7a319f9b66bf5139a5c4720e6f2bd41a4e676ed7ef4d71560480
947c6d0157919d329a5ed2d7e30ce0faf8e8afa45cc3b488afb0a458a698
df930bfb1aaa8237c99dd55f0ab89a1eca4c93ed45144c1d33f4cf69d292
e2391fcfd2567270> ND 
/k 
<10bf3170612e883674d2675aac39fa142a2f9de407f25596157041411932
6b332ae2d4fa3c0ddc898c23c05f08e72d709dc579b1e312ec6a93695c30
1a3d2ab819acce32be0c8844ab0c8e673394acd59bf85b4e01c11760551d
a5bbf8c3bec8256ba68e642aeb11eab1fc1a6cf28423139a718ce929bd69
31e85d2f6284b2ae19ae57fab88ec02c749d90082ed4a4910f0496120990
fde2a857e763fa7bdbce919c9b5519491057482baf894f8db330bc550378
52ba1a2cccdf1d28f7f0369843e440aa35cf69532fae46431342ebf4145a
520c49ce0792a2c9a8907775c4078890a68bc353fbf2> ND 
/r 
<10bf317063846c0d04467b4514eeaf5ad995f8d8da3e0541d6f7a614cd16
f2b9d993abe9c60e5ca865f2734124f24b2ec52a5bbcf0a7221741e2153e
7b99166e11861c8eee45454a33f78a2901dc2f2d913b968e7baf595955d3
5e26483c787c3400ab1e058ff442fe2782ceb94a9fdd838e5fa36fb49df6
f75c685cb0d3aae93b1a290c0ca52fc6435558b278caa53b308ec9170836
b34b5bb8fef447b4040bbf75c67da39aafde9b489498> ND 
/t 
<10bf3170675b4d3401fff3ff5f765da0613b785b68f16ce9d5b5009ed6e6
c17a99d782a0b8170a32295317d6ff13c6b2b3428fdbe7079492aeaea2a9
67dc16f3ceac0a5c4a3dea104555732498258f9dde1e32f8f3bd67606686
3878f49a7b3c611ccf1764ddd808f62cd239b60518d713e318d042a89036
f7226dd2774d> ND 
end end
end
/TimesNewRomanPSMT findfont /Encoding get
dup 97 /a put
dup 99 /c put
dup 107 /k put
dup 114 /r put
dup 116 /t put
pop
%ADOEndSubsetFont
/TimesNewRomanPSMT*4 
[
97{/.notdef}repeat /a /.notdef /c 7{/.notdef}repeat /k 6{/.notdef}repeat /r 
/.notdef /t 139{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*4 findfont [15.5 0 0 -15.5 0 0 ]mfnt sfnt
BuildWidthShowArray
145.171 15.5 mov
(track) sh
restore_ctm
save_ctm
/TimesNewRomanPSMT*4 findfont [15.5 0 0 -15.5 0 0 ]mfnt sfnt
BuildWidthShowArray
145.671 103.5 mov
(track) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: SymbolMT Initial
11 dict begin
/FontName /SymbolMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 192 dict dup begin
/.notdef 
<10bf31704faacd68130743d1032b19039b05d30ed4559c5ecf2da4ace2ab
53168b5c58eb3d8c199cf05ae7> ND 
/gamma 
<10bf317079c888c222c2de9c82f6b7e5dabdca8fed4ee12bda52e5605fc1
a057066e6ec94dd05518ecbd08a717f441c495be9df449b2d187f3b9609d
94d526d408a9f682bff6dffe8d69779993da60f44d627944c76063a62b12
0e5752625d362552fcf3b9d970f9c71b92d7e4dde2e8509c291e30d2946e
216c8ad02b906820477d21738bd7a404c127e84ef1d15834983d33a909be
d4ea8fa8f87ab241503d36d8d427c3cccc93903ee875fd80a0b81093d1d6
c70933fdfe268135109a01> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/SymbolMT findfont /Encoding get
dup 103 /gamma put
pop
%ADOEndSubsetFont
/SymbolMT*1 
[
103{/.notdef}repeat /gamma 152{/.notdef}repeat
] /SymbolMT nfnt
/SymbolMT*1 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
209.361 124.75 mov
(g) sh
restore_ctm
1 lw
43.4438 52.25 mo
284.194 52.25 ln
282.694 66.5 ln
44.6938 66.5 ln
43.4438 52.25 ln
cp
s
0.5 lw
163.694 63.75 mo
151.194 52.25 ln
163.694 63.75 mo
176.194 52.25 ln
s
1 lw
36.6938 137.5 mo
42.9438 143.25 ln
49.4438 137.5 ln
55.6938 143.25 ln
61.9438 137.5 ln
68.4438 143.25 ln
74.6938 137.5 ln
80.9438 143.25 ln
87.4438 137.5 ln
93.6938 143.25 ln
100.194 137.5 ln
106.444 143.25 ln
112.694 137.5 ln
119.194 143.25 ln
125.444 137.5 ln
131.694 143.25 ln
138.194 137.5 ln
144.444 143.25 ln
150.694 137.5 ln
157.194 143.25 ln
163.444 137.5 ln
169.694 143.25 ln
176.194 137.5 ln
182.444 143.25 ln
188.694 137.5 ln
195.194 143.25 ln
201.444 137.5 ln
207.694 143.25 ln
214.194 137.5 ln
220.444 143.25 ln
226.944 137.5 ln
233.194 143.25 ln
239.444 137.5 ln
245.944 143.25 ln
252.194 137.5 ln
258.444 143.25 ln
264.944 137.5 ln
271.194 143.25 ln
277.444 137.5 ln
276.194 154.5 ln
38.1938 154.5 ln
36.6938 137.5 ln
cp
1.19385 140.25 mo
29.6938 140.25 ln
1.19385 154.5 mo
29.6938 154.5 ln
278.944 137.5 mo
293.194 137.5 ln
278.944 143.25 mo
293.194 143.25 ln
43.4438 66.5 mo
43.4438 87.75 ln
284.194 66.5 mo
284.194 87.75 ln
s
18.4438 38.5645 mo
18.4438 52.5645 ln
s
20.9438 48.3145 mo
18.4438 52.5645 ln
15.9438 48.3145 ln
s
18.4438 81.0645 mo
18.4438 66.8145 ln
s
15.9438 71.0645 mo
18.4438 66.8145 ln
20.9438 71.0645 ln
s
save_ctm
/SymbolMT*1 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
110.361 124.75 mov
(g) sh
restore_ctm
4.19385 52.5645 mo
32.6938 52.5645 ln
s
4.19385 66.8145 mo
32.6938 66.8145 ln
s
save_ctm
/TimesNewRomanPSMT*1 findfont [9.75 0 0 -9.75 0 0 ]mfnt sfnt
BuildWidthShowArray
3 63.3145 mov
(10 mm) sh
restore_ctm
save_ctm
/SymbolMT*1 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
124.944 61.3145 mov
(g) sh
restore_ctm
/SymbolMT*1 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
194.944 60.8145 mov
(g) sh
grestore
grestore
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
%%Trailer
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
gsave userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse grestore showpage%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0
%%For: (Sheldon Stone) ( )
%%Title: (radiators.eps)
%%CreationDate: 7/3/2002 3:56 PM
%AI9_DataStream
%Gb"/LlZ:i@P3;"LK`24*EJ/[W>Tt3lakiGDW/%D)gNM=eX*8p92rQ/XZrP^(Q)7Ml[qB4MpWHnj!.mZ)Aa=7.Ak232O^KAq80map
%J:.9>ZJJlW/h]C`f"ZX*WM7P*d[;[e<`\MDdGr:I[!^\7m/r>gVZAd"$Y9T)+5,AA8j97qAPd<R51uJc(Y`#\ogs4I2-mE:S#c"a
%a_GhdCO1KE^=Z?ZRkNsnf;f_.\Fnacj5kQ-oi(JXp%j&Un`l)JLDk)SQ^=aaF8GPeWCQ:1L<03T]-QsMRVarH?,(=7XdW&19"u<0
%.l'!1=Y;\G0\\7Il]7OSjk1F\QY1%DmY;VIIb62HQdd;<+2l&:H$6psfFT)oE+TsTfkRq,g27\\ou8q8%H->W]59GBOfC^?PH2%_
%kDTTtX+kM!SLlP@KVODa#iE8iEn/CcS+FTW.n3EMU^'+k;%LCeptV3#]/Ws\:7G<AeBKH:n;?\!n+bm:Ze\Lu`-g_%oYho%9SJ.W
%rUJt9lfR5jqn?<Br96:.'<@qb2pLGND@f"2o)sH22'3UGeQ)su=suGfI[<Wu?XBJfMJKb]`m=Z<LMsna"lX^+kWcoQlI?<N[FB5B
%ArB@3Tfe).W]6Sho3fpbF+1Z'C`As@-?l4/1Ne7ug[bD;N0d[KAZ!\/g<qN&rQTMG24p2ZkO5a,C)3_l`fJetZ[K1X$]PU-FBNBd
%r-Ghe2EtP"0mBFp(66+2T/N`H`ms7Q"V4P[.K7pd*%s2lRk5u9C'TKBT2g0HpXAR.q;P&RnY;%4?=#N+a6S4d6D']-cg%$gX\>=O
%2U?IgbZ@qYP(<lU;&to(>&`]q/!?fsS)q]P`V7S!&J=X&e`*mf]P^KQh`mrXiYZb)BbBdJ+O[+3;e%Su'OF1WfITg&#q^:#aZnSN
%;3h&dL];f&Lg)\:0>(C/?(=[Ak853Fs5ODWncamGCAlQ;D(kZ*[CNpAj2qP/QTUK[]?Q(l>a!edP-XIef46^FrUn"%_k@%8Zc/j)
%"6mbj@_L%c4X,WL9XWqiH`DtiFEt1::3W&XHbe'8JH)u9DmC/KC%K0u3<!sOA0raMZ.Nr[^L_>?%=+PsALXpV?Ml5Q+((SC:<^+?
%8nX+t5Lh"\D=O*Zc15mJ(tt\j9a*@C,=sZ8B_\4H`mMcI)Z#A&a^pCTB(:TP##Wf;Oo9WM3$RJrCj*@QDZ;Tk5\f;!IH`JfZGY5`
%U=l]UeTu6#$dZ/soC]#p_NX>J`b)u-Z<OJ,Ve:ns7c;#jC@HG>(7VA+q<d5o4+-dO\Qu>pJ(Z_X5\/]Y)@uMs.P^kSP+0PsS15e$
%P8:MC<<MP^5#DcnB%:.6gn&(QIf(h/UjBPT:kg72X))d%)J\,clsH58.Fieab"pTT?[++_J0q]n<L+G3j$#%qSpk:g+o)#1+X0[a
%1=A]F^/#Pm%>qV+h*[J7S>,74P<^[Dm*I(RWftED=`[3HoVBV.8eD"tgd3`hs1CH??MlZbIV;b`9s=4Kb^na(S)9ZuK1CF9hCgOp
%PaMHWqf*$q8V%A$SFqeFM)+qrUA7LVSq]UrhkeHkSC8pdZ.`d-)kE20+t]g01/!WS$-bnKWf6.<cG75+b#Xof1l4d#>$LSMWc&37
%aqal@=X?:SVl9C7_Tl/7O_Q;/;__7Mb"TdLA.4+^RH=R>S9\_27Br.7cppQcg,B.2k!3]SVL[ka<Lo7nBjg-srW-T@iDZT;[j5UC
%qI5*\<=j+Er?7M-kL:U5J<;p)5pX7aPJ/0`MZ/*/Bte.D[/qQ!:$e(-;C[Pq^tk/KC>u(4Un.'S)C4:nW9\Ch/c[h`'AT]V@;Q!6
%g`e7=-V??p!=oWs_@.V"X_P6/pb";pW@Fhg\eal37#9jO_AC$lC7s!qMo`7CWcK3?&J):Pd!<S=7rQ0d1:sR'0/8[9$-M>%JsZgI
%M%dnYRB@BXTcY+d$iOIIr2F&3i/oe7n`^Ad$6F\&@=60)ne-5r$7A-1XO^I4M!SLIPk_IfXh"Sjcq.k6Yl_FDcFe9,?:+bZ>gR^T
%RsS?N9nCGC5dIu;S@V?.P6'*5+i/YD]r/n<bA;-/^EHQ$BW`/`&en:!'tSPWLsF)eYQc9<j*_!]3,iDbakdD:DRT$:O\[(<D)T/d
%k5R6t&(U/nj8X>`s0lnDe^n#T18)<9POEi$[:3-XNi"@d[AmX%821p8J(ZXmHtpb#OObbBVHI=pgD;kSFm+6/Yt?j`,u"\=AkR@_
%-3"n,AdbMU$fFGf(,d+',fAhZ-9;Ba9L3\.$7c&J`X\nc;&gN)qK6V:'Q0'55^*S#%#&&B.D1"8a\a1]CdC.1)PO_f.q:B(jGHM"
%rBH./kZT'OI#(2[VkCP]r`>qi(`kTI,i=7ARjL;_W'*j,33mUo^mpcU?-9,noBh?TLAV*cV8&[nX>,*dU*`Khj+V"?D&dOC#Ot2F
%bUgCG-YAZ>2;BqgJ_,Y8:jtO*>84^g,0K#k7OtVUFc@@@9t\l0S1uuiG)8#631LmRkT)&i.Rh9(l4,o^r#0FjgO]0t3b7ueWO'C4
%P<7K7&j`oYJr44la:Vo',<t14A<;UD1k8>S&6*Z^7"AC7Ba@u3?,_sE#fd''!.UuH<9RdWaP]'E0(<X,EM2Mp;>4.4>,"2MR&et>
%5_tD5MV*lRM/hP*<F?74FPn7u'CP(C&],?A-V>ANJsd(G(HrWYdP@C$Ot!/kZZq:UD/s`M$?T<_r__C]@%-8q8g^E"`D*RLeai=7
%IM@cuh&d;_*n"GdbGfEuQoqfI^8!Rb%)]Fbb*#]LJ>,3s2f7g-;m`lGS*Z=*=ulq#;&',D#B`D!DX;-l-mJ]#TL#4t0EHl_'PJ1;
%H)Rp.*\b(%quguW>`?@)-:843lQ'BZGJtJ!U)0lI.AA"6DD7]K'uQ2Vq,:)2h)jYCPKD2<@<H-p>b2j7##@gQciehJE^d=$cE&MJ
%Q;a-@-tYN@KhN-"P,<chfF#d-?qIa?O3mO'&5:9)]<G`K$l;_k7N*8ake2G6JdBXoW,YjH'"8`6!>Pr4EN)9RI18715p)^cr_(1f
%o]sl0%X,^P.gNb%0kY/Lg-VYuZ(I#:PK+;>b:eXV24l@eH&+n(7's$REJ#GfmXfP_@#brL"GhRtV67oCA0P#SM)%R(l!lk)CcYS7
%2uoTt?UZeb`G3k(;4j^66?J'-=8oR];RO_l=<-Z"/r6<;MEhi'L<@CeqFnk5KX!7fW+:#'E6C5W!#Xu$s(W9bJe<&/[AeE_A1f?@
%RPp+o(_7WX]N5qU(g[di3[72U3$WsG>a1Z"a?!MOQoS2h5Z156QDQsn*Wgf$:NFUA`JKlif!Jm*X_T9:'p2tt`Bg8VS9N3f@T4kd
%RS4`m.:NU+8m1iq]X(GV#Uqu9b/aNAjj%@B@&2]fH#kBR3Vj6>3"d&,+@Og(MYXHD=tNJ-[&ue!eE?t>!2)o>4Gi.UA%%m*fl#1D
%RV(aBN%%M^OPmq5+n;[-nM@0RNYjl19FZb!G,fSQTpO-NE,E751HBda$N>T+jju:"ed<rp2?muL/!p,A$Ctpj,NM\r@XW-fW20dF
%T0_rg"WLFGItkT9d>J;6NPU@P()9*/"4mbFVp?6S986GsiDbJMo'?6!/qSu.>*-m?=gS40JCs^*EObe.jqa+c:^3:=?9OrQ-k+!'
%Xb;HqVpoaeL^Z8M$6\>l&2t%J3Nd!7VdO%i+=BQ:W%R>h+srG.R:X@7!lFW[B>I3`VpL;<;n1_Z>9,&X`Upu6<HoabQ(Ee&gdA.i
%4cbOKBrP49+M*8o1ifqU2Na#N#A`kii2ntYmGY4s)-h6o9bu4rf'5*UNcYt?3D;Y"$YE"&mMsJsfF-[^IUiR)N&c*4cDXZPG_lPo
%QOW63YslcC?:8=\0j:iG7^5K2G\V4\[+4Q#Or4Ru74'l>hm<o-0GWO7;Hp#+L.XS'fH"A5:s+i^;9#Rf]MCjQSaZk:!UG*updb*%
%6CYgYB?PgA=7?4K)0-WroNN&h)&$>TW]cIcfG^MYlGK9p/ZmX4(*!@Q0EKfGLlI.>YQ`9-[KRt(XXBj5OGa4s<!lRih,]nirZ=$4
%=^6f+/;t7>"N1fd\;'h,&oh'7m8i'T-`9uM*ha'iN9C:."g"/*%U(PUZ"i3(-'Olq%F8LTVm,*i9ERO(FQ2OX9Rss#H>dJAg_<C\
%OR.><N`g:DGY\Ba#'nLWd>?7>'.)ramOl+&?kST[86MmG2TucKnng?G&j_dX1>1kaa^2`XH>+9_9iWB2'uWThMISYOnJQnpHZ>u:
%o+=94M2<GHTSRj/0q_t>;*iWp$T#`.-Xj$2<9@GH6_GWX5W-1D:h^p"b>_=o<GIpOFZWSkl)nQcYr`S=_2*TZ<b^\/,$Zi184?_h
%!0JjF90poY3W)RDP)tJW/Ri24(4q$W\HN?g9Yr7!d>#PK(Zkp<N.l:P*/N:@;t*`f8d-QVo#Yj=Qar`KSEKPm@9uti0DTV&7E"T1
%]S%->6&%DISm@ij0q9nPb<eFb>r[Oq!)=d>A-,m^'O`3(%^t6FL1b?(X!LFj1^)$BIK^L]^s!UeWuu)G63UlYE;i/!ah_#/2c_!E
%n?4MXVk/`)77tH!#A\R(@o8_K`Yl3]%eESu@LtE;7<i]VQC`pQ<cLWK``t'1h4D^$ZK/>)c]P/3kUI0]3'(#(\q;C_:%$\;dV[VD
%;QQ_mG]r'\SQYbe@V;[Z=Xp+KC,WsUcW9$t-/Q%^'GakSJ8&";_n^S#0(/rX0MN+*&gr2D9TBmpjB0f4jDeS*iNJK?WPL9u8uu?7
%(27Pi#b3Ha)1`9Pfsf(e^cN\V7sNZ4!hMM8=X6Yo8ipuOXRV@([!0bO$O4qrZ4/A-q^=jA=jLAm5p;Ok$gOAg[01A:PdZR_]9*"R
%_m_pof7IrENG--0Nti6[6JE@f!hh^6/Qju9i^O&&aRbnZTIdJe9FQrtjFUL>GsC7Q?ZQO\RgrUUq?^_[ijGEpLI(I;B"u/0Jmbk9
%ha1:DL?&d`#,aJ@<QU<m0d:G8p,N250\r]sO(jnI'0L?'C<`&>'Vq!F,pEdNJh'qj;&8N.ZEI@dY;Arq_u>e[h\/QcE05;`D]9pi
%pI(1!"uY$V2Y*n:%f*)BcEi3NQNc.@//?@>n^@K+-nh;#gpi1#J<G9JF-k$<EuANN*cfk*;G"=$QK0ntI-S=Q"b6l7P`<1YaKH9`
%.38:89EL7Y6kOUInp34te2Yo$:aS2$,1q!,6]*`f-2_ue>aZol6j-B%&L&K@<-ZuO_"qcaO&VbJaNrj>Zea0i;&Nt"U*Jq.'OJc3
%Bp;8^H6nVCbDLB4R/E7%)'GjrbI#RI'3=neL+8^mMA)JL9m&`cObBL1>(2\a<h.&*6<e$f4eITj`rPKUfY;/kiW1+V?Lu+qD-:@L
%.eZ]#8AE?cgUku"4M@S:pD+8Bj#Xi$E,l7%b/;\]G[%E/i.q>iT6.SHmoQ9@`5&(8$ItA';Q7gT>'7ihTpC\G5Ts%'"-j3i8>)YS
%)(Cg.dUL_K\lZ#T(cXXt-44U@e1FCrVd`cLS(Xu6r+4MWbG;On>WPgn*@'K=D%^N`q,oeloj/Xe:^.AoiqT6G=f\6NOHO*M?]!"B
%>NGFT!f1CU]jHW+`1We:nQg2SRfr(laV0kk]jK#q%/_eTo[@Au]ZuT+qc/)`OmP1,o5;6YY3>kbTh0Y,EO5Gi+<?g(Ge^b'%R7&G
%1rlEaoY$JHX4?e3C3`8(4'd73fPLHrh*4#)DGGB<+'-X)LR67tHa_d:/M9d/hjc5Ul\iZA]B+oiYF6!V_j<kakQu,@&3`;8/3f_C
%A!7<>0'(U\*L1LQM%trLZbtpqJ%!PNBlgf?/5D]+`TC5gG.#r#<*hM=VsE`M\[krgF+!c'dq,kZ*a`K6=2ZmWUpc&a'_:;m[+jR:
%c2-&Sir*?(_;JaP5K%&BO)oC=TfHIdd%HJle;(*ta5tEPFg9dESpe.3CG$)U]Y'U]SfXIV:-dB"el5tYG#qXaGBLFo]Y<)3e!B=E
%iV%*:2">=#ZJ.9mk;tf3463\G/7`.)-d=(ha9?!U?aM\HT_$.Qa_o'3<>BENH+2F&*Lr]Q<Ze+H?[.8e`o3<(J5D6%`GmZ%A)Zl9
%p3qr1*0-'iVk/RZ,HcK?`0IT",,p#*lTGo[B@=`)"Qij?3SL&Frko6YR[6q2V,V]-<-TiK]o;X0GH:-%EqSP`jja\nnT3p@cVjT%
%V"2j:efX#9n_&4UdaDsW8RgS\Xpu8rn07L;Ojm].du0#m_<b8\LF7WnNDsg!Hdc"B<)'I''W@in/X%NI&Z-^p>Y'K_!FH)#ek(S'
%#Dr+KQ_0Ql&8(:)l:tO:Fm.Mt3a^tAQC77h'H]Fu5*En4`BV+!^=o,:he,09+Jl,pK.d$bHPb<*[L7WC*lcWO\ZaZ-j8XB9FB$bF
%a.$@Ubj-YEgh;1'dD21r,,84#YS??)KF&7ZLoON5r`buB5ES9Ug#O?2#^\DBc^sX7Pi$'PG.-0afkW'DXM-c@1g#^u7+pXcFnY87
%*mNm>U\S^iSPSD.Gs/@njkS+=\Xf5#Su[-c1d=#^RN5+`-:d*kqPZG)O5*TPA<4rs5#OoHCd'qLc">GXA2^%0Zg-JrXIQh(0s`Yl
%dk`l)Vt90#F>f[b-e%UmSlX<\lDDPM:<ca6eMNoB-V'BRA3-,P`fk^H:!/<^'GEP_'0T3Vr8>tI5!Bn2`maHg4<E,7C0ZeT\/<u*
%)=+OGkOlJOWb;"3T%)f3Y,f.8?!YsgVC80>F^E=nUM<h(X%>1OlDh]'TZU8'ALg^D8l^-s09=7Y3@uW?QqVa)QDH*idZtT-QfOUH
%\N=gf2g#cmG."AUl's7DKuAuk?q3$hoAZ^9("6ViN/P9GaRs`\`SZ@u2#7!YS_GANZVrrj@rhDr>?XOZ$O&9Gd4,KEk2sb/bg]>1
%Qt!3*Nt%%(Ks;=rC-u$$ch3Ell)C9<0a1OA0"'/^-Jt2\Co)21=%@#&VJ;jFWhod#<)+1hn/Fga[iu`3)U=iW,bO/9[%+^u]:;F8
%$$i\XpYgT5;"j\?6qhp=USP[9Q+nL<Had'=\I+EjMX\i`$_,oOoOR+'R-$XFibJ\oke,S"<i=WuQNdM^?4p"s#Vq74*6$dnH:Ku7
%<;Qo/X@V9)Nq'NtjJIP`:2`:-G<Y5O0Rhj8r47M7?@2/?a.+E8<)!:qa+$724>D>HF?D"KTTWK4Pc>s+7X%p&#EKL/PcCKX+U+-!
%8r6Q2.&ET&6nptbZ#ZS[>SIlO'U4i\.4?[E.OZgG.jurH=ff!'[\1.'\tH\_XMCLGTYr=UV+?l:XNmKc$<Co-'q8XnVHLao0:0S_
%mDpA*In\rHFZ##r3$*3)WoPRl_f_!64U>Q6MR7l#CCYda5oA-R++o&rnU^]](1WGGE^%A!#**`nW3//%1E_YLi%_t9Qs>+P`c+,T
%f.jo*+H4q/99+@t?GcJsWdFc,?,['Iqlbc0a>g`/E)7!*Vf5AhQr`R:_BBY<'[A+3;/o!&SKD+`k^`B^chf\oH:ZfNOUl1'nlflp
%o<.:&CAK]#qE[8?HG$HG'0Yfl]Sftm7NE$<c495h=NB;r^[Gl\_Dn4EYL2`]dd)R+?akN[:B1>\O"2;?r''e+3XR53"`H<o^Z$aK
%Ip2ben]4?54_]j7!%g/972Tc!'La^5,Nk/1c=&.';hV"R:+%$S,"/7MQ&_$F<!943]d[&P\;GeO+ff'<RWIDEckXAI_H-lE'#GiK
%72UqJ<^KplZNt2(TVW34c5f2QMni@[>6MDJhBKb#&6FHg`M,EV:*\,N:fi6S%X0?-QB51"?4M=1i%(M)"MZ,XPlOoQ?loOK0K93P
%AAof2VEY4$+WU1VE=@[k:u$fE+Y`V=BH%p54A#\9egHGCEoNLa^1jXK;JjDLMYtqrYu7.#+#:m03Uoo"TXb^o@g/ma<;WB\E:=jb
%kI_m!F8/G8B.ncFH'RmN8ptKtK1d>)KX`#]QAFQFDN2.gE.oiO[%*C9S=)Z\7O?M59VlnFL$=dpS^+#Se`8)Pm^"n/kou=f4&t!K
%dS>sKMNCC)*)DqGc=_H>S0#5epU!k/m'AnC`3;H"6PG)!;U3M&[$^Na"\jgtSJ'/`F@+J3+654EA:3.5:rj$`b`JG*QjU8\'eg4H
%rJ?'t)]YKW=e]f*W08[qKkL>a%Hb<AZA15*SXe)V`i.-"OkAQ]27arL1a)SFLqQDY8#**(;lu2$ns"N$],^:0..EZGXP"Y/`TmRq
%%bhA#[ch&*3:Si*XZV-ps.(&C]K=&lLt*s6)o:5BQHs<2qh,F7]Or_[ojW4:If1-uXDj&P^hGFp!V3F.p6?'@"6<h<lmnKt#KXZW
%fiKpr&!298k7j5HI=(rNSP*'io'Q8)F<6RSmH%\d%ZQ9+RUr2UJ:?P;0tN-%&nh%!0pW>k&B4slF:H7TgCM0R/*Z?JhfCD24biRV
%[q2JXSQtf9Iemiddf+/=(O\qopmORl5mgHu*;YE->^O83$;OS#-uM#!Z;<7l72Ue9;V1*-HsWg96<8V976rDu,h5bU$CQu*R?:+0
%;p_I6`>DK1"f\#T<)64<BL8_47Oi+IL0g"Y2l*M^;Hb@qYF:[mNA7E=)6(#(Kr^*\S0<#VOP23VrRI\J-_q5bU_`-h)&0&A6gCs"
%[98[hXN<JjO@#M#@\(u,,fApV(7gWBFejI:;T!!Ba&>mZ8&U:Te?gQFD+SS+;Vr4gnM.$7.B2tb@Ra+-?B`78V"brJJ;OcOR%o`l
%R>)qq8PZ-LPKC%>3ZOQLMG2-Z9ZiSnb>CF#GXmn,0k>G71-[(QTpf6&#oTTXM>!G`-q+>uBI)&,O9mGZPgs<m-=khB,iE`a4r'JJ
%6`.%0'3LDHXN;__a>D15aQMX2.WTA8):*nnBM$4N-DO0iP'NU\W6`Rc<b-@_5@nm5e>VM42<B*;BA(fdD$A*Q`Hapf3fJ'AKt./&
%-fsmflKCH#$3*M`So6BhIC4M#"2F/^lQ.5+pk\J>7h=WSk2T2A@D$NLS'2`jK^fh6q]6egn"K2UO/TA/_]Jj"0lfmP%Fp(Ps7n@'
%nbnd;CFJm;Gk<T8f21gVnE=)NYG'SVHX+9KqAP7)%N^$koJI>0@0-/T7pgO)TW6,ZeT>Rn+>X(iX.62((Ab6*b4s4lK7;M*H=baT
%3p`2]X]J!Kf/8$1f6V!5O08)t^=FeZn*:n,luoQ`H<kr7I@E`G]16qS06NaKf05Zj6=;op9Pukff,oZCc=XO*8%0Hm/G%3BL'"g<
%*a`4ELY_k,:Z$1$(cJRlmqVJ:ep[?0([F8IpY^%d@sRe`AB@+SDiF,Qs**@J5^Ej<kN`o3>^$T.`^pZc?[pfbS7-csSDF4Y%,1kq
%g?oO-I74.)/-^E^9R-'GaT$RZ9R-'GaP]3X-9V'4jF9<h-9V'4j>]7u-9V'4jF9<h-9UA*0mc4s>iA-8qp1Js]]?Pf=-^ce3q<'/
%HsjYX/TC]W;<`r@7b'-,<%4gd_*"U-7VgMNjjjbP5[4QC9jf"U?4?oHbAC]EZj3iV9K.M/-L%k7Qamu!FGE^PJU'rAZl1%(V'$dH
%2aH3j);1Kre#]js@Zrs%L'M:\C[@,Zqp'o1nXU&Y4UB-54?t)Q%CkoeR;YlSVZGDcUPDBnVZ@UQoFI#h:BN5<KFa.M:BN4U4n9>E
%E*gOFn*MqLna!:NFa6jj7H,sp4X.f.,2?M0W%MF:JF3>.Bm4RICfqe#)=XF`:YMX('<c5hZCC9VS$5L:hcl`(?(4l@7FYU^6OG8%
%71ZpX#c=!A27P)+<q:6ohl^V[p5FHMn_i;g14OXB)/+i>`(WB6)+pV3V+%9;,R97u5jDf$'etqVBJ[Fm33YR#+([R7Ggu7#a(++i
%Bfp"t+Jo]>=f^7?d10rE>GBh9'+aDi+s'Jh]S1tS29Je8U\;_f*g:hBj"ZJ4O[!N,itM)DUi%(#&f(C^4Eqn0?ukDtBp<D^)?X]2
%Tte2m3#Gt4E;.<T",dJ1Ohoii'&6p[!+?jL2K6PlQJmfRa]9+mGk7es>IK4'q4$uOK(+Mb9+g?,R(_N>;a\-9*bSrLIkp%(caGOF
%C9QA>E=O"7*M:A4@_Ak1\IbRONj:8VdR:Nr1^==F;-k8I!jMp5#-\=G?<B>M23r<l$TY6lN>H02I=R#"GiN&NlSE=b'X/<]/S;YS
%H-S;mB4[f_E`fajYTDe4<br4R6XW@$Nm)a%qjadFfFq@$_oo"eDc]P;AmM`c&c2V;!ujTgL.*V*Ff!dF^tsmdJ^&brJ_^p]"5>Wn
%`SO]H4>2&)R-/^]o0Eb;*=qbO!V"0K%$AdXEWgeHNgg)c^C7aFgB5X/Fi6_n(3Ehq<6*6/IR?]^4Qn^8HEB5dgIp8FKTi@&lX[=n
%'t(SF2OtQ0!jk`u6aK-a%'SDr\A.uq/XTo<(UI<V\W.<-i5)1D>Xo)2%BkqA\94$t)7D(,[Z2!uj:%j-UWr&fkaN?Hl+!&Yg4Luq
%/K8eM9kiLV)S\F,J,9>!gE&f=@i\%Ch/T8Yq_tlDBn.K38+P;h4gfCL<dOB[F:CAQgO#IQ(K^8cb'.&r1n9'1gU=<b#2X.(E.tDp
%]hMCf\Vdqu,^\)(YM'CcaC2JZX>Z+S6:dI(Z9gIMc"Bb6ND/RX%2JJ<D.\]I>8/fY0u%;SD+i!JV+JmOh.^fI_5"^29%IdhiS>A;
%j,)%h=te^*d:UZmqhb:[)GkN`\n*>HX-%:'9"$=6*DN<\FRt[Vb1[:um1q&"PK>^0d?YI>%7j+i?B03PIFuudqNEdMf\$ip2h__9
%d&1;VVIRr+.cRRd0[J/0:1nTLYuJ_+5V?rH/,Tc29X9MXZ]S"+#*CIE)sTiB_EOZ:CRl_)7/k%=]<HK-llYfQmG`l4OPC*JNj/?)
%mk'EdnA7Z-YgY":a:gRG=[%)K>OuCo;:p@4[crLJH==EliT8mAWAeho?J*+b#@S%`-ofR>NQ*T+jsT,+*08eqPs7ebr="ip:14N<
%iAUgA5HDX5gns;P,cWQ0q;aiKb'OnbBfoRNd_@h'WoPQg;c(VTinnPFljNOP^G-hJlZTudCWdT`_41qYVg_\/k035cGo=oOO;?Nq
%bm`cRqq7BdIYKX8V!14+Aj8r;c/bb4ghs!dc.-dAL1EmH2)/U)jD<PO9q/TuR@?+H)fdl$HUDjP1,pG4_c`Lsa,s&Uorlgnr?d3&
%cfe&N,T`[rNhORpEQjro;YTXW'dGZP*eUT_[;,j3p!g_M"TKF,"neL1pD-]b@nG&:JtUE49CBJABP9t6oYg1,/?"b>lQ6"Y6MK-s
%IcEbgNo),:%-@"jcC`f3RA!\Yh#QIW^#J_0q+0Pf0d$f(.*<-YP>*.5h@+Y`j4C"B3E=o"&Zc3PN-P3c$HjOW`gbJWL;OChq5J9q
%ZK)9;8FHWIqs>s'ZGcKAAToBUl`Nb=>a_tN2hBfV=UMp$mWTP`Qjunk3nJWLnD>>Wrf'/#IE5L=h=ZJCGCPb2%AHNBkrTcT5/$c/
%NU?$W?S/_@Aog8d5Q8iDdq#ZPIVB(;HC8K9;"@CZq0tZimJq>Y:['N>K^O>eoD_O]T/2tMaPQnFcV>AGQe/b)U,n@%N:]+_,PpJa
%6(W;do&U%MII.b8iE3/=lcYs`7t1:q.Z<XLJ_<0Dj];3*dUg7%#oQln."r$H4.i&t!kQ</&u@omaTd,$L+?=;)MP@f8sRg.FF;)I
%Td_U&S=rtV+9PpRRTiPW,pQ3"N[4?Ip4]20KT$$iNeH>arc`V)s+FQ-FI-D7V^:!V?%UfSD!M9,@Ria2gS'=(Sp+md"f16cBSoH9
%YB`HUM\%_S!d>[h/rVMdlZ>=!9\s9JYI-k0?\VDf[G(.hAL"S%-!W[aC2*$th9#q/L67L,8#go(LWZ=5hLP)u)!F^jpUJT/&/,Xj
%[01YeDT+uYo.J:ippG5H!A0G-et0)QkOU=ZM%iqdA@IL,[9DcbFupa=[LA]KCEB0ErtBCSH@-+3UJ"<_%oeC=0MEu?Tf"I]ImU7Q
%\k@2s+ab/^4-CV`mL^IQNp<B$-='W5p2l?'*=ae9TiOfoQf_=8"?c/$geP&+ROV;[WS6$hf<.$1&dd6\A"g;R"@B5V`^ogL#=n/S
%kIj/%[^"<#q0MdD[J7frN(pJ-.4@oF2n"+)>m5h$3?^M$*uSEJ<H=tRM-/)j@QjN=-M^4&Mb$;p46S]=XRU'oH/>OV,"u0SS,NEK
%,KgHfNO\k^`hH;s0bRj`0rKiZ?[J<oNQMU#Vs@[/G1tYACJ'o0.Tt%8etV.kNRFUH*s#`PnLaT14":sK,5"Lu7fu7]V+eCnTs!L@
%N/ull,"5ckpk7i:T69L*Qr-kPBWFs-Nf\tr(t(sgCTU'O/`/*&H:";GER,6=<VokID^SnVi<h!.l""g^:2*\s#K$0eh'fc';&`D[
%^8rB@3Bk9UW3cC2eaBh&,QC>:k)tsoUV(OuUE8@2-$tt82ook1N!a->A93XEMGZr"7IRN+"S*Emd)BRV]J[`1h`7HXQN])sO6i.;
%HDL$VXY?&_D=Fs?E)#mXA]%?-38gi\?=(KkJ1&$m4+-P=j,;N'S$C>hKfAt+FGB*Vf4(HB^+MmT^iu":Y>Ypc_SB_L;W18r^$B4%
%6<P.!U/i^j]5[d2'o5uUKgr\:WGU%pm`8Zb'[`]uMSuOOALcH.0MDI@8c_i?]2#8#/G,-"j*aHedCW.$BdiT%3/k29j5Emm<3uuU
%;'K=`BW-oX?/PnRX@+Va#CJJPHan)"o[!ZX[0ke/6K;(Y9^)pr;/nkmg4ARM/d[6'>LY-VfXc:_@<jDg@3JKf[^*S>*`t')Thn3#
%+'0FZ#[d>0;\=n@/8#Aj,/:I6S]Y[uoC?]*iX.kr\Tckt'X?$2*",K%%i4V@Vpd:57U;1<S?D/VF[ruq6E^jr-jO>B08"-kC(cT%
%[8#VK^o^Z4>bRfCM3OH`3*\O(Eqn.IBY[HCO_DWk\aZo0r\YiHaUFG$+mF,s&rq]2LMGYWUoma`kBn['f1/tcO[KR<X`mM=T?;RD
%Yn1h=.mZP)n`dLMV("pGMAeVl)KN+P*H]^I%c;B`]@JiRX_=:m+j!gMU^&cYhYoCSUC#X&'Tu,I.XZSKP6QR)h7kS`T5hSC/6!jH
%Dk@]d9']IF\g0R\7H?@n)=h>-iHcAQ.oRd"HHd)16rY`3E"Q1;cPP8Z]Ceb:c8D"c-6#:-%gA8+lR`<'kOF-<b]?R,mn3DI'^8',
%Ih]<47#80LNd(u>GNIqTlH=t#ajn6%eF\R360D%2bn]JJD1.76._1@3`Z5'[&P&iZo6%G1ki>/0(Z1Il=!k<f&l2^0+*M=;E]WiI
%,YmBpU*HMhZkZ1=<Ge[%,jkh"#ELON16D2bXiM*UjjWSk`++>L!L_8`5c<0:,gaGmMA-:.5]S$@^*P6!<;=$F.ap!ZD1VO`,&<;$
%6Ds%1-7%7Y2@LL2V^@Ua:F&!c<#PL(r2_DQL\okIX;cEEFR(u]KZ8O^qRWO@7FZ]+*#WX^90f/Re^Bn0D<MkVYF\#(5"ZYGiu)J!
%4YdK4#R;McZ)BrZh?m!AU#^+M]?"R_W_Kr;SjA;gemu#u]WHk+<k6:MjD-+7-N2[pC<EJ8cf0"qV4`5fCKIPK?hh,K,fJaEN>)J7
%$+CSJBqGlmAFajd\3`'#N12P:Di[7q\D\WVUb1h!Ls,SjNMEKeP\D)94AW-%9<j4/I@]uM\,Erkj>9O6Eib4aa?0t*r)N*q^Et0q
%L+J5tlP=9,jH-1Z>1f(h95%%G=35p5G'$@-T8"r5H!<Tk[a=rgj\`#QgVK72p].9"0"a,?\>)N1%DM<;UE%*\CFu(>=p=*#4\E6j
%j2C=VOf-LVmEjQgJkD1-INPK[Y4CT/.Ldi#Bn1:+?0)u&_G)I>'07,@=j!:EPgo2++O4dP+Q][n[n/.m_18h^;R&Bq0=6DD.BOV=
%aP+M/4Ar"AK?jJ/p.!54.WQ_%8/+6i8WF=+/4/GOK&4:AWsBh"a6NZP]1DH)?50GdWGB#r,<%4AZ#pQg8G1LXj`aW#@U=n*d@g:J
%8,elaa,&M\)'k6P9GoI115&#'.B-da.\IJSc5$F&+njiK'8hCc[#\=:>K3Q[7>eW^LWi^LmWfc&LjeejR9U>+c+suuf,LSjc-5c\
%-[p6uo@rY;oG)@XK'5NnF8dXF!ui+>O3Jp_k*ts2SeA"AM7f&N;T9)0cm$2SGC8H:\es8ObBP6/5+uEd,UK"-$!-:/?^"(a11/;7
%3,OR0Zm\AC;c2qWQ/7p49/a%OXaYB>fUTuTZEmpAH$Tb==S8+rQpp-4ll-:2XIrI$UY*]K9T7<ZGq;!sL!a]+.g*$A)F$G=g.:dr
%-]j8?c[*Ur3%V=*`JCG?R]j-:!4A``iKPem([`e^@B:QR>F.;bOeF9_[k9)M*oX0LBYpAGN@uQ1qgl[^^XJ*&8Y`E^UsU!'WC#P"
%8u&e@i^f7WQ,cX";t!@iSOuq]C(ngJ:kj`'m;CI&bVog(eQo/=CG07TJQfUc]7NV&C*h>nYnBf9WPXpe[no?q>`%_OngVi\$41SD
%(b>CC\hdB_eY%UYa#)ZiL<=dSW2.M12,/Z])(F"s"^2Eo<JjqUW-uhiTNcabq+].7g%2>WY#QOMH/<\FEpm'UDH471<=s3kYKFKO
%Jki]X0Jk(E6:IiB&pY!n?gaukY,9fJ.C[d7BEp%\la6Fj--r*!Q+Ul%-.-pMbX^fdMJ<[fYUM2'93`fu\EMT(Sf(S.(!]1C4PIt@
%Qr2D=^c_d)V"V8kb\nW*YN7?_]2?MfW#(7"*0"(^1F060+C>VA<dD0tP1Q#kOOju)QbO$%7;`ZV"X*AIb:5djY'isj:%j:n4e5"e
%`-?ZE4gsFTK+\MdU]@fN&0uUNMEJCq>3^l;dp-G(Mta:7A@:9c+Z7e#@kJr=A'r*DjJ;j%/gl<B*nK!91mbO2S92&5'kcr=@AN^%
%"a"k[]SkDgBAkJ1U8h<)\LE"5GpOCN5Gk>m<VX#n17]?@=s%0'7I,"bZu(.A%4Qb^6&KbdTVlWZ+em/R%R$f^j@!2t5jrp1gXgC/
%&>35/FKb"%WrdVqL:E$sO*1#H1Wc'QNfJ!I8,%l/n>JuR?U.kh^dS=sI^:Z^o^09C]^,*gb92"Ad;WN%gj\SF?FnFd\2Yt@f6f=d
%%!esOjItgcYIg>8k+.7ufPnR^fs\//]&#%HESAG>me3T!.5Gf9]LuEpDT\$9f%nm4X"Ts]q=9bO6H4(QU`gmPrUgO@PD'p69BZdd
%e'"3rCrE+f14r+OKQ-&)"LU(MLSY>H[d(</8mk`f3&tmn.qb"e]H6FkKXbfZe"*;"'WmK$hcc=qCEI"oq=h'u^'rpnWD.BdRX8r5
%3NZ_fSn9sm=MK$kH4qe5flB<&H/5!&Dml.s,qnUVXq1je?E$hM[DW=Xn*^m\\F(\(-%P/1Ci=T80+IQKT,h#RCZ&fLO3QUI)=Zc8
%#(4[Qj0,F\bJ!FXqe#_:eQa+W3rJMWrV;&KZL<Y%DeI=M`GW*^ds'L(:Q+fkq]3Mc=e9!'RL$j<-;f-6Q*@pt8"?FY1-?O3(_FGh
%:8rqK$_fKTa+Hn8+VB5<VNuOqd!C&:?S,:fEE/r_oj/QPn`9(Q\pq-D/@Nap`Ll'lrGmV[mM3JtC$Y\Cc2FI$ZDSitQ>1l06NTD[
%<Uus.+(k[7H%%nr_`(^o4L)d_GlcP2]mhgVAY)";rd`PhJ&K+,2?FEbLV_-mE@.>XoLJbU"YA_a"tT6E<WHQji7!D[7js8i2"9a[
%%mE@V9g%:s+0$r5S0?U]/V(DpV/F5tEB;SQ5hhtC4(\--$]mDF#ZMjNm`0>!&-TN;,!j5MPK9c#d)/cGMa($?&P7ptBkd447F(7V
%,Sk3I>#=$ae\I']UZnuc2SRrt/j;1%9KIfBqP,%(60-m!li")K^c[M=E3&t_7pln^)0C=WAaJ$`0%VpS!s@i0<[$&]nMNWh]eBBC
%'&GAQ[`dG3cTItl!SC>`a5@6K6rQT[-BG0;VTT/RaD+4;'1)eSb<+.?O;8sT="G#"!ebGO*JaHOc"_qCai3N%*S:;XF<LI)4%#@k
%SrhgY=`:oQfP;-kb-T2[i0m>cHb0?FTID7$N03T./n<Q#p#:)(=P\jZYYIOHr`_a.7+MN:YTt=T]+I>^];C?RkKRVD3mE]!1q2K0
%^ns8P0-7d:0-1NZY=Taf\oPGX&H+&i*3@-#=pP!Y86T]0gtCk4Qhm6[N$<E=mXcU9B*@$J5'K<?XW^5ue`:p@Oh_(8X%DW]7(;6+
%mb)[P4?>)th^]>$YOi%"GHY%/hQscL>s>mqYf:XPY2;/Uq5.d]R@=SCX"T[[9WCqRoAulH3*Ijd^Uj[2FKo"$5Ah7'B?QKTZIrNS
%A]O-0.\\#p+.Kj=mTl:S?M;PMku,9%&$Xq:0j*_rV3)$Ge,\>&-KK)?R)1#rh-1J>^IHu'F`QJ1Dmhj_SMqA>fj_QYe8cB5i:l8P
%GlgcdZ2#RIXsb^d4FBTu:C'P#fPKHK(Rrn?AA)/bBRXcde*di8g]@$leBqQQhihF.@BoX8\fOm"1u&G,dVp^U6A)ibc3*85JAR/$
%X38JZ\N'CO/M9i*X6![iVE?r1d"i"hjl2HCnS3?`>B'f*@1;t,LTd2$LO-Mc?LG74*Ns/+Q[`F7Ek\a.X'JUp'qIrM)Np(aWh`&/
%<tMA>P*kTCG)Omkq^$UGHtl\'oH/Y]AA'uLAc003W),%UhKJ@3qK]?ket8DU-"Jc8?4c;F0@s8F=p=7U"A+Q^-af#7kY8D>?)AP0
%q;P&ROnT3\2RUKo_(,&;?#gWD-Th6Z_)(aipABMh6W8/8p03nOQlfcGonD<82Lj?,p^SWtI.1fnYWMW8*SsC]Q^\gLs);hf9`EdZ
%,&&]@2B"*,ME38/]S\uEZ_=h3E2*boX+No\%ZGGBfN'rK)D"S*;b0CI%mM-uqY?f0SpZn'no"bo5X*uGcNbf;'1TcIc$LV$F_s6Q
%4JQViaE%lmMOS$s?2-aW$`"o\U\F`,9Ta[Z]8[F$;B/M<#A^CY'mWDPm'7%aP+M6N@bsmZ-ThfkY3PMg%)r%eYi'^AneQ[E,e>&Y
%JVR5K4`F.B<9U@S`C7Z4+]r#ci<uSTpc[,o_4p:FA#@TRDp%ML=AsGVMe)5H]/5(V)c="s2C24cc6KYr>.>&CQ"giX,7(LfpZ9*.
%YU_)P%4Lj#YUruYOqCf#Md/@'60MHULs6pE0j=eCgKS'f/b^C^)Ui9uJa(#U'ZNOl*JA:O1+BWBEdeYK,`cu6X1^iNc2I!PFka5g
%fEbXB\g)!^g9`SMoj4?abQL'?:g=5E+X:,W;_]Xa8ur9P%r@0?*X_8D!-5Z!aZuI.*Z`#TZV=,XIRHV"INCV#Qgp!uJ,,F`7u-Pn
%QflWD:X/(Slgr*7X#D\l1L@r8s#egV]L!l*rkR1U9)MpFeF?nUA/cTZK^rJn@df2(IeUbFbN7EHh>=8?pK;i<?=/n9h(e33hE9uE
%5OuSh8ok\,NF0d+rA'Mf[`FK,D9Ej"'/MH[rt'e>j!E;`L`OrdR-aU,bPk2.[`XUp$LI;?90!)or0`Kp)7T5/n$;!2LoMj&Md3+=
%?g-jDR!&qr9l<EQ=,t;Ca]K!.reW,nMAg0#!l&kDD3Ae><)m4ZgO9=R]H++rKhS%G`'a(qdj4rU[91[PZTL>n%haHYrFdTFK.G-7
%B_VqY%ZBs:FISISF^=ImHoZ\k?D1:-s#h[qU^AIiqKSVZ27A_+Tul&nmLEDB%"?bnX,IZ]UK&5+OEGJ*i4e8uW,Nh+'j_ncA*&>Y
%VTRKZp091fUk`?)T$k?4V,gQ4pPas\_kI;JV6BJE,ndPZQ0FbCXn,q3'1hMM6O2''^+%O.*ba@F"0EAST_5#dQ8!l3G+eL`+)&?H
%<\T*+bWtLEJ8*N/MgDLp>k_G]H.?ih?q]'7:5j(oFi2sdp*%>8G9GiEoiehBT_6/1ZqgU)^NETdZsN$Kf#qg$or@4KLoJoilh,eX
%g"c9I`2^K-\lAi1B?:tT[;L-CDr$i_WO%`/WO!D]]i2F*\Tk]d+uEk82d'-h4M/=EKFN/fYT;?FRW>T=crc"eZR(;_M.]s"N51oN
%'*_I&qJ)%B\(&#!$8R0lKjE=oYNk;'CI2fM'Ds/]ojfgATeQN>HCLcuI"WLp_?1Uk6%Es?q!,$4_-H4&HEVH`]L8U-!EPJ/%l-Tt
%SfsmGHAsB?b\LVhMYn7BQE1).#kgAWm*m<l[,c)imQ,!Wog%JahVI5)RqpS0T#r@&131)=G-]<e#TNWrJaG./ch:EeK_"ea3rWO4
%#8CbqTY@"JgTWk;Se#caM%d.T?S+H"a.(%gKk/`SX2Ut`>?kDuk*o#TK`pMfG.hUqX0_J3Pb:pU^hMbOcW7(eY?=tGhGF[6iO7F0
%0/!T"p9E:_c#:iu!51EtSC6aJYj*R>.5I=;cD`gUF>lKl8ilp*G(4c,0"c&i-:HTAQYT@lJ%;Zl-Xanf!%[+Zp%;u>5<aBR5BugM
%!!,tD$N~>
%AI9_PrivateDataEnd
